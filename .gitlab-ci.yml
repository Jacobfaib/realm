###
### Variables
###

# Global variables (will be set in every job):
variables:
  WARN_AS_ERROR: "1"
  # MAKEFLAGS: "-s"
  REALM_BACKTRACE: "1"
  REALM_SYNTHETIC_CORE_MAP: "" # Disable Realm thread pinning.
  TIMELIMIT: "600"  # each test should take less than 10 minutes
  USE_DEFCHECK: "1"

# Local variables (included on a case-by-case basis in each job):
.gcc48: &gcc48
  CC:  "gcc-4.8"
  CXX: "g++-4.8"
  F90: "gfortran-4.8"
.gcc49: &gcc49
  CC:  "gcc-4.9"
  CXX: "g++-4.9"
  F90: "gfortran-4.9"
.gcc5: &gcc5
  CC:  "gcc-5"
  CXX: "g++-5"
  F90: "gfortran-5"
.gcc6: &gcc6
  CC:  "gcc-6"
  CXX: "g++-6"
  F90: "gfortran-6"
.gcc7: &gcc7
  CC:  "gcc-7"
  CXX: "g++-7"
  F90: "gfortran-7"
.gcc8: &gcc8
  CC:  "gcc-8"
  CXX: "g++-8"
  F90: "gfortran-8"
.gcc9: &gcc9
  CC:  "gcc-9"
  CXX: "g++-9"
  F90: "gfortran-9"
.gcc10: &gcc10
  CC:  "gcc-10"
  CXX: "g++-10"
  F90: "gfortran-10"

.clang38: &clang38
  CC:  "clang-3.8"
  CXX: "clang++-3.8"
  F90: "gfortran-5"
  # clang3.8 seems to generate bad code for some newer x86 cpus
  # we have some non-AVX systems in our CI runner pool, so back up to westmere
  MARCH: "westmere"
.clang7: &clang7
  CC:  "clang-7"
  CXX: "clang++-7"
  F90: "gfortran-5"
.clang8: &clang8
  CC:  "clang-8"
  CXX: "clang++-8"
  F90: "gfortran-5"
.clang9: &clang9
  CC:  "clang-9"
  CXX: "clang++-9"
  F90: "gfortran-9"
.clang10: &clang10
  CC:  "clang-10"
  CXX: "clang++-10"
  F90: "gfortran-10"
.hpcsdk212: &hpcsdk212
  CC: "/opt/nvidia/hpc_sdk/Linux_x86_64/21.2/compilers/bin/nvc"
  CXX: "/opt/nvidia/hpc_sdk/Linux_x86_64/21.2/compilers/bin/nvc++"
  F90: "/opt/nvidia/hpc_sdk/Linux_x86_64/21.2/compilers/bin/nvfortran"
  # cmake gets confused and can't figure out library arch
  EXTRA_CMAKE_ARGS: "-DCMAKE_LIBRARY_ARCHITECTURE=x86_64-linux-gnu"
.icc212: &icc212
  CC: "/opt/intel/oneapi/compiler/2021.2.0/linux/bin/intel64/icc"
  CXX: "/opt/intel/oneapi/compiler/2021.2.0/linux/bin/intel64/icpc"
  F90: "/opt/intel/oneapi/compiler/2021.2.0/linux/bin/intel64/ifort"

.terra38: &terra38
  LLVM_CONFIG: "llvm-config-3.8"
  TERRA_DIR: "/usr/local/terra38"
.terra70: &terra70
  LLVM_CONFIG: "llvm-config-7"
  TERRA_DIR: "/usr/local/terra70"
.terra9: &terra9
  LLVM_CONFIG: "llvm-config-9"
  TERRA_DIR: "/usr/local/terra9"

.llvm7: &llvm7
  LLVM_CONFIG: "llvm-config-7"
.llvm9: &llvm9
  LLVM_CONFIG: "llvm-config-9"

.debug: &debug
  DEBUG: "1"
.release: &release
  DEBUG: "0"

.maxdim4: &maxdim4
  MAX_DIM: "4"      # test up to 4-D (needed for HTR external test)
.maxdim5: &maxdim5
  MAX_DIM: "5"      # test up to 5-D (useful because 1-4 have special cases)

.spy: &spy
  USE_SPY: "1"

.checks: &checks
  BOUNDS_CHECKS: "1"
  PRIVILEGE_CHECKS: "1"

.cxx11_normal: &cxx11_normal
  CXXFLAGS: "-std=c++11"
  CXX_STANDARD: "11"
.cxx11_hardened: &cxx11_hardened
  CXXFLAGS: "-std=c++11 -D_FORTIFY_SOURCE=2 -D_GLIBCXX_ASSERTIONS"
  CXX_STANDARD: "11"
.cxx14_normal: &cxx14_normal
  CXXFLAGS: "-std=c++14"
  CXX_STANDARD: "14"
.cxx17_normal: &cxx17_normal
  CXXFLAGS: "-std=c++17"
  CXX_STANDARD: "17"
.cxx20_normal: &cxx20_normal
  CXXFLAGS: "-std=c++20"
  CXX_STANDARD: "20"
.cxx11_32bit_normal: &cxx11_32bit_normal
  CXXFLAGS: "-std=c++11 -m32"
  LDFLAGS: "-m32 -latomic"
  MARCH: "i686"
  CXX_STANDARD: "11"
.shared: &shared
  SHARED_OBJECTS: "1"

.openmp: &openmp
  USE_OPENMP: "1"
.python2: &python2
  USE_PYTHON: "1"
.python3: &python3
  USE_PYTHON: "1"
  # FIXME: It would be nice to find a better way to do this,
  # but the alternatives look scary
  PYTHON_EXE: "python3"
  PYTHON_LIB: "/usr/lib/x86_64-linux-gnu/libpython3.5m.so"
  PYTHON_VERSION_MAJOR: "3"
  TEST_PYTHON_EXE: "python3"
.hdf5: &hdf5
  USE_HDF: "1"
  HDF_HEADER: "hdf5/serial/hdf5.h"
  HDF_LIBNAME: "hdf5_serial"
.fortran: &fortran
  LEGION_USE_FORTRAN: "1"
.llvm: &llvm
  USE_LLVM: "1"
.cuda: &cuda
  USE_CUDA: "1"
.gasnet1_mpi: &gasnet1_mpi
  REALM_NETWORKS: "gasnet1"
  CONDUIT: "mpi"
.gasnetex_mpi: &gasnetex_mpi
  REALM_NETWORKS: "gasnetex"
  CONDUIT: "mpi"
.gasnetex_mpi_debug: &gasnetex_mpi_debug
  REALM_NETWORKS: "gasnetex"
  CONDUIT: "mpi"
  GASNET_DEBUG: "1"
  # GASNet headers are not guaranteed to be warning-free in debug mode
  WARN_AS_ERROR: "0"
.gasnetex_mpi_nightly: &gasnetex_mpi_nightly
  REALM_NETWORKS: "gasnetex"
  CONDUIT: "mpi"
  GASNET_VERSION: "GASNet-EX-snapshot"
  # source URL is set by a GitLab CI variable as the GASNet-EX team prefers
  #  it not to be public at this time
  #GASNETEX_SNAPSHOT_SOURCE_URL: ...
.gasnet1_ucx : &gasnet1_ucx
  REALM_NETWORKS: "gasnet1"
  CONDUIT: "ucx"
  UCX_SOURCE: "https://github.com/openucx/ucx/releases/download/v1.8.0/ucx-1.8.0.tar.gz"
  UCX_WARN_UNUSED_ENV_VARS: "n"
.gasnet_embed_local : &gasnet_embed_local
  EMBED_GASNET: "1"
  EMBED_GASNET_LOCAL: "1"
.gasnet_embed_remote : &gasnet_embed_remote
  EMBED_GASNET: "1"
.mpi: &mpi
  REALM_NETWORKS: "mpi"
  # mpich-3.2
  MPIR_CVAR_CH3_NOLOCAL: "1"
  # mpich-3.3 & above
  MPIR_CVAR_NOLOCAL: "1"
.cmake: &cmake
  USE_CMAKE: "1"
.kokkos: &kokkos
  USE_KOKKOS: "1"
  KOKKOS_REPO: "https://github.com/kokkos/kokkos.git"
  KOKKOS_BRANCH: "master"
  KKERNELS_REPO: "https://github.com/kokkos/kokkos-kernels.git"
  KKERNELS_BRANCH: "master"

.prof: &prof
  USE_PROF: "1"
  BASH_ENV: "/root/.cargo/env" # make sure Cargo environment gets loaded

.legion: &legion
  TEST_REGENT: "0"
  LEGION_WARNINGS_FATAL: "1"

.ctest: &ctest
  TEST_CTEST: "1"

.regent: &regent
  TEST_LEGION_CXX: "0"
  TEST_REALM: "0"
  TEST_FUZZER: "0"
  NO_PRETTY: "1"
.regent_pretty: &regent_pretty
  TEST_LEGION_CXX: "0"
  TEST_REALM: "0"
  TEST_FUZZER: "0"
.parallel: &parallel
  REGENT_JOBS: "2"
.incremental: &incremental
  REGENT_INCREMENTAL: "1"

.external1: &external1
  TEST_PY_ARGS: "--test=external1"
.external2: &external2
  TEST_PY_ARGS: "--test=external2 --test=private"

.darwin_power9_scheduler: &darwin_power9_scheduler
  CI_DEBUG_TRACE: "false"
  SCHEDULER_PARAMETERS: "--nodes=1 --partition=power9"
  FLEGION_USER: "gitlab-runner-flegion"
  DARWIN_JOB_TYPE: "power9"
  IS_DARWIN_JOB: "1"

.tsan: &tsan
  SANITIZER_TYPE: "TSAN"
.ubsan: &ubsan
  SANITIZER_TYPE: "UBSAN"
  UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1"
.asan: &asan
  SANITIZER_TYPE: "ASAN"

###
### Setup
###

# These commands will run before each job.
before_script:
  - set -e
  - uname -a
  - |
    if [[ "$(uname)" = "Linux" ]]; then
      export THREADS=$(nproc --all)
    elif [[ "$(uname)" = "Darwin" ]]; then
      export THREADS=$(sysctl -n hw.ncpu)
    else
      echo "Unknown platform. Setting THREADS to 1."
      export THREADS=1
    fi
  - |
    if [[ "$UCX_SOURCE" != "" ]]; then
      mkdir ucx
      cd ucx
      wget -O - $UCX_SOURCE | tar --strip-components=1 -zxf -
      UCX_INSTALL_ROOT=$PWD/install
      UCX_CONFIG_OPTS="--disable-numa"
      contrib/configure-release --prefix=$UCX_INSTALL_ROOT $UCX_CONFIG_OPTS
      make -j8 install
      PATH=$PATH:$UCX_INSTALL_ROOT/bin
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$UCX_INSTALL_ROOT/lib
      # force inter-rank communication through tcp to make it "slow"
      export UCX_TLS=tcp
      cd ..
    fi
    if [[ "$REALM_NETWORKS" != "" ]]; then
      # OpenMPI:
      # export LAUNCHER="mpirun -n 2 -x TERRA_PATH -x INCLUDE_PATH -x LD_LIBRARY_PATH -x LG_RT_DIR -x USE_RDIR"
      # MPICH:
      export LAUNCHER="mpirun -n 2"
      export MPICH_CXX=${CXX}
      if [[ "$REALM_NETWORKS" == gasnet* ]]; then
        if [[ "$EMBED_GASNET" -eq 1 ]]; then
          if [[ "$EMBED_GASNET_LOCAL" -eq 1 ]]; then
            # clone gasnet, but make it read only since we want an embedded build
            git clone https://github.com/StanfordLegion/gasnet.git gasnet
            chmod -R a-w gasnet
            export EMBED_GASNET_SRC="$PWD/gasnet"
          fi
        else
          git clone https://github.com/StanfordLegion/gasnet.git gasnet
          make -C gasnet -j$THREADS
          if [[ "$GASNET_DEBUG" -eq 1 ]]; then
            export GASNET_ROOT="$PWD/gasnet/debug"
          else
            export GASNET_ROOT="$PWD/gasnet/release"
          fi
        fi
      fi
    fi
  - |
    if [[ "$DARWIN_JOB_TYPE" = power9 ]]; then
      if [[ "$CXX" = "g++-6" ]]; then
        module load openmpi/p9/3.1.4-gcc_6.5.0
      elif [[ "$CXX" = "g++-7" ]]; then
        module load openmpi/p9/3.1.4-gcc_7.4.0
      elif [[ "$CXX" = "g++-8" ]]; then
        module load openmpi/p9/3.1.4-gcc_8.3.0
      elif [[ "$CXX" = "clang++-8" ]]; then
        module load clang/8.0.0
        export CXX=clang++
        export CXXFLAGS="$CXXFLAGS --gcc-toolchain=/projects/opt/ppc64le/gcc/8.3.0"
        export LDFLAGS="$LDFLAGS --gcc-toolchain=/projects/opt/ppc64le/gcc/8.3.0"
      else
        echo "Failed to detect Darwin compiler version"
        false
      fi
      module load cmake/3.12.4
      export OMPI_CXX=${CXX}

      if [[ "$REALM_NETWORKS" != "" ]]; then
        export LAUNCHER="mpirun -n 2 -x TERRA_PATH -x INCLUDE_PATH -x LD_LIBRARY_PATH -x LG_RT_DIR -x USE_RDIR"
      fi
    fi
  - |
    if [[ "$USE_KOKKOS" -eq 1 ]]; then
      # Kokkos requires cmake 3.16 - grab it here so the default can remain
      #  an older version
      wget -nv https://cmake.org/files/v3.16/cmake-3.16.0-Linux-x86_64.tar.gz
      tar -zxf cmake-3.16.0-Linux-x86_64.tar.gz
      PATH=`pwd`/cmake-3.16.0-Linux-x86_64/bin:$PATH

      git clone -b $KOKKOS_BRANCH -- $KOKKOS_REPO kokkos
      git -C kokkos log -n 1
      mkdir kokkos/build
      cd kokkos/build
      KOKKOS_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=../install -DKokkos_CXX_STANDARD=${CXX_STANDARD}"
      # the following line is a workaround for Kokkos issue #2652
      KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DCMAKE_CXX_FLAGS=-DKOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK"
      if [[ "$USE_OPENMP" -eq 1 ]]; then
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_OPENMP=ON"
      else
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_SERIAL=ON"
      fi
      if [[ "$SHARED_OBJECTS" -eq 1 ]]; then
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DBUILD_SHARED_LIBS=ON"
      fi
      if [[ "$USE_CUDA" -eq 1 ]]; then
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_CUDA=ON -DKokkos_ENABLE_CUDA_LAMBDA=ON -DKokkos_ENABLE_CUDA_UVM=OFF"
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ARCH_${KOKKOS_CUDA_ARCH}=ON"
        #KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_CUDA_DIR=${CUDA}"
        export CUDA_PATH="${CUDA}/lib64"
        #export CUDA_PATH="${CUDA}/lib64:${CUDA}/lib64/stubs"
        #export CUDA_TOOLKIT_ROOT_DIR=$CUDA
        #export CUDA_PATH="${CUDA}/bin"

        # kokkos expects (the right) nvcc to be in the path, both for toolkit
        #  detection as well as for nvcc_wrapper (if used)
        PATH=$PATH:${CUDA}/bin

        # libkokkoscore.so doesn't remember where libcudart.so is?
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${CUDA}/lib64"

        if [[ "$CXX" == *clang* ]]; then
          # clang speaks cuda, so can be used as Kokkos' "C++" compiler
          export KOKKOS_CXX_COMPILER="$CXX"
        else
          # if not using clang, we need CXX to be Kokkos' nvcc_wrapper...
          NVCC_WRAPPER=`pwd`/../bin/nvcc_wrapper
          KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DCMAKE_CXX_COMPILER=${NVCC_WRAPPER}"
          export KOKKOS_CXX_COMPILER="${NVCC_WRAPPER}"
          export NVCC_WRAPPER_DEFAULT_COMPILER="${CUDAHOSTCXX}"
        fi
      else
        export KOKKOS_CXX_COMPILER="$CXX"
      fi
      echo cmake $KOKKOS_CMAKE_OPTS ..
      cmake $KOKKOS_CMAKE_OPTS ..
      make -j$THREADS install
      cd ../..
      # tell cmake where to find the Kokkos install
      export Kokkos_DIR=`pwd`/kokkos/install

      # now build kokkos-kernels - unless we've got cuda and clang (since
      #  kokkos-kernels fails to build for clang7 at least)
      if [[ "$CXX" != *clang* || "$USE_CUDA" -ne 1 ]]; then
        git clone -b $KKERNELS_BRANCH -- $KKERNELS_REPO kokkos-kernels
        git -C kokkos-kernels log -n 1
        mkdir kokkos-kernels/build
        cd kokkos-kernels/build
        KKERNELS_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=../install"
        KKERNELS_CMAKE_OPTS="$KKERNELS_CMAKE_OPTS -DCMAKE_CXX_COMPILER=${KOKKOS_CXX_COMPILER}"
        if [[ "$SHARED_OBJECTS" -eq 1 ]]; then
          KKERNELS_CMAKE_OPTS="$KKERNELS_CMAKE_OPTS -DBUILD_SHARED_LIBS=ON"
        fi
        cmake $KKERNELS_CMAKE_OPTS ..
        make -j$THREADS install
        cd ../..
        # tell cmake where to find the Kokkos install
        export KokkosKernels_DIR=`pwd`/kokkos-kernels/install

        # enable WAR for: https://github.com/kokkos/kokkos-kernels/issues/757
        export REALM_DEFAULT_ARGS="-cuda:nongpusync 0"
      fi
    fi

###
### Tags
###

.linux: &linux
  tags:
    - linux
.macos: &macos
  tags:
    - macos
.darwin_power9: &darwin_power9
  tags:
    - darwin-slurm
    - power9

# For MSVC-in-wine tests:
.msvc_wine: &msvc_wine
  tags:
    - linux
    - msvc_wine

# For compute-heavy tests:
.linux_compute: &linux_compute
  tags:
    - linux
    - compute

# For CUDA tests, always use a specific machine:
.p100: &p100
  tags:
    - p100

.p100_base: &p100_base
  IS_P100_JOB: "1"
  USE_CUDA: "1"
  GPU_ARCH: "60"
  # cmake needs to know where to find libcuda.so
  CUDA_LIB_PATH: "/usr/local/nvidia/lib64"
  KOKKOS_CUDA_ARCH: "PASCAL60"
  # docker puts both 32 and 64 bit libcuda.so's in LD_LIBRARY_PATH, but that confuses Kokkos's cmake
  LD_LIBRARY_PATH: "/usr/local/nvidia/lib64"

.p100_cuda80: &p100_cuda80
  <<: *p100_base
  CUDA: "/usr/local/cuda-8.0"
  CUDA_TOOLKIT_ROOT: "/usr/local/cuda-8.0"
  CUDAHOSTCXX: "g++-5"
  # cuda 8.0 does not come with thrust
  USE_COMPLEX: "0"
  # have to tell cudafe to expect c++11 stuff
  NVCC_FLAGS: "-std=c++11"

.p100_cuda90: &p100_cuda90
  <<: *p100_base
  CUDA: "/usr/local/cuda-9.0"
  CUDA_TOOLKIT_ROOT: "/usr/local/cuda-9.0"
  CUDAHOSTCXX: "g++-6"

.p100_cuda92: &p100_cuda92
  <<: *p100_base
  CUDA: "/usr/local/cuda-9.2"
  CUDA_TOOLKIT_ROOT: "/usr/local/cuda-9.2"
  CUDAHOSTCXX: "g++-7"
  # cuda 9.2 has bugs in thrust that break complex reduction ops
  USE_COMPLEX: "0"

.p100_cuda102: &p100_cuda102
  <<: *p100_base
  CUDA: "/usr/local/cuda-10.2"
  CUDA_TOOLKIT_ROOT: "/usr/local/cuda-10.2"
  CUDAHOSTCXX: "g++-8"

.p100_cuda110: &p100_cuda110
  <<: *p100_base
  CUDA: "/usr/local/cuda-11.0"
  CUDA_TOOLKIT_ROOT: "/usr/local/cuda-11.0"
  CUDAHOSTCXX: "g++-9"

.p100_cuda112: &p100_cuda112
  <<: *p100_base
  CUDA: "/usr/local/cuda-11.2"
  CUDA_TOOLKIT_ROOT: "/usr/local/cuda-11.2"
  CUDAHOSTCXX: "g++-9"

###
### Docker Image
###

# Each job will run in a fresh container with this image.
.image: &image
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-16.04:210610
.image_clang: &image_clang
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-16.04-clang:210610
.image_2004: &image_2004
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-20.04:210609
.image_hpcsdk: &image_hpcsdk
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-hpcsdk
.image_icc: &image_icc
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-icc
.image_msvc169: &image_msvc169
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-msvc

###
### Tests
###

# rules for which jobs will run
.test_rules: &test_rules
  rules:
    # some jobs are tagged and can only run on certain hardware - a CI variable
    #  is used to enable these jobs in case that hardware is offline
    - if: '$IS_P100_JOB == "1" && $RUN_P100_JOBS != "1"'
      when: never
    - if: '$IS_DARWIN_JOB == "1" && $RUN_DARWIN_JOBS != "1"'
      when: never
    # some scheduled runs are only looking at specific subsets of functionality
    - if: '$ONLY_KOKKOS_JOBS == "1" && $USE_KOKKOS != "1"'
      when: never
    # do not automatically run pipelines for pull requests
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    # commits only run a short suite of jobs
    - if: '$CI_PIPELINE_SOURCE == "push" && $IS_SHORT_JOB != "1"'
      when: never
    # if none of the above exclusions apply, run the job
    - when: always

.short: &short
  IS_SHORT_JOB: "1"

# Each job will run this set of tests.
.tests: &tests
  <<: *test_rules
  script:
    - ./tools/add_github_host_key.sh
    - grep 'model name' /proc/cpuinfo | uniq -c || true
    - which $CXX
    - $CXX --version
    - |
      if [[ "$USE_DEFCHECK" -eq 1 ]]; then
        export DEFCHECK_CXX="${CXX}"
        export CXX=`pwd`/tools/cxx_defcheck
        # if we're using MPI, make sure mpicxx uses the right compiler too
        export OMPI_CXX=`pwd`/tools/cxx_defcheck
        export MPICH_CXX=`pwd`/tools/cxx_defcheck
      fi
    - free
    - |
      if [[ -z "$TEST_PYTHON_EXE" ]]; then
        export TEST_PYTHON_EXE=`which python3 python | head -1`
      fi
    - $TEST_PYTHON_EXE ./test.py
  retry:
    max: 0
    when:
      - runner_system_failure
      - unknown_failure

# Some additional tests are only run on certain configurations.
.external_tests: &external_tests
  <<: *test_rules
  script:
    - ./tools/add_github_host_key.sh
    - |
      if [[ -n $GITLAB_DEPLOY_KEY ]]; then
        eval $(ssh-agent -s)
        ssh-add <(echo "$GITLAB_DEPLOY_KEY")
      fi
    - unset USE_DEFCHECK
    - |
      if [[ -z "$TEST_PYTHON_EXE" ]]; then
        export TEST_PYTHON_EXE=`which python3 python | head -1`
      fi
    - $TEST_PYTHON_EXE ./test.py $TEST_PY_ARGS
  retry:
    max: 0
    when:
      - runner_system_failure
      - unknown_failure

# testing MSVC builds is kinda hacky right now - not supported by test.py
.msvc_tests: &msvc_tests
  <<: *test_rules
  script:
    - pwd
    - ln -s `pwd` /home/wine/.wine/drive_c/repo
    - cd /home/wine/.wine/drive_c
    - su wine -c "wine64 cmd /c 'x64.bat && cmake -G Ninja -S repo -B build -DLegion_BUILD_REALM_ONLY=ON -DLegion_BUILD_REALM_TESTS=ON -DLegion_ENABLE_TESTING=ON'"
    - "# wine doesn't seem to cope with concurrent file access, so use a serial build"
    - su wine -c "wine64 cmd /c 'x64.bat && cmake --build build -- -j1'"
    - su wine -c "wine64 cmd /c 'x64.bat && set PATH=C:\\Tools\\VS2019\\VC\\Redist\\MSVC\\14.28.29910\\debug_nonredist\\x64\\Microsoft.VC142.DebugCRT;C:\\Tools\\SDK\\10\\bin\\10.0.18362.0\\x64\\ucrt;%PATH% && cd build && ctest'"
    - echo OK

# use a custom script for running Realm tests with sanitizers
.realm_sanitizer_tests: &realm_sanitizer_tests
  <<: *test_rules
  script:
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=${SANITIZER_TYPE} -DLegion_BUILD_REALM_ONLY=ON -DLegion_BUILD_REALM_TESTS=ON -DLegion_ENABLE_TESTING=ON ..
    - make -j8
    - ctest --output-on-failure .
    - echo OK

# For performance tests, run these commands:
.perf_tests: &perf_tests
  script:
    - ./tools/add_github_host_key.sh
    - |
      if [[ -n $GITLAB_DEPLOY_KEY ]]; then
        eval $(ssh-agent -s)
        ssh-add <(echo "$GITLAB_DEPLOY_KEY")
      fi
    - git config --global user.name "Legion Testing Automation"
    - git config --global user.email "legion-testing@googlegroups.com"
    - export PERF_MIN_NODES=1
    - export PERF_MAX_NODES=1
    - $TEST_PYTHON_EXE ./test.py --test=perf
  retry:
    max: 0
    when:
      - runner_system_failure
      - unknown_failure

###
### Jobs
###

# Each item below defines a job.

# There are two tiers of tests.
#  1. Full test suite (small number of compilers).
#  2. Minimal test suite (other compilers).

# Run the full test suite on GCC 4.9 and Clang 3.5.

# Linux with GCC 4.9
# * Basic configurations
#   * Release
gcc49_cxx11_release_legion_fortran:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *legion, *fortran]
gcc49_cxx11_release_llvm_cmake_regent_pretty:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *llvm, *cmake, *regent_pretty, *incremental, *short]
#   * Debug (Privilege and Bounds Checks)
gcc49_cxx11_debug_checks_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *checks, *legion]
#   * Spy
gcc49_cxx11_debug_spy_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *spy, *legion]
gcc49_cxx11_debug_spy_python3_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *spy, *python3, *regent, *parallel]
#   * Prof
gcc49_cxx11_release_prof_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *prof, *regent, *parallel]
#   * C++11
gcc49_cxx11_release_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *legion]
#   * higher dimension support (5-D)
gcc49_cxx11_release_maxdim5_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *maxdim5, *regent, *parallel]
clang38_cxx11_release_maxdim5_regent_pretty:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_normal, *maxdim5, *regent_pretty, *parallel]
# * Features: one test per feature
#   * OpenMP
gcc49_cxx11_debug_openmp_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *openmp, *legion]
gcc49_cxx11_debug_openmp_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *openmp, *regent]
#   * Python
gcc49_cxx11_debug_python2_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *python2, *legion, *short]
gcc49_cxx11_debug_python3_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *python3, *legion]
#   * LLVM
gcc49_cxx11_debug_llvm_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *llvm, *cmake, *legion, *ctest]
gcc49_cxx11_debug_llvm_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *llvm, *regent]
#   * HDF5
gcc49_cxx11_debug_hdf5_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *hdf5, *cmake, *legion, *ctest]
gcc49_cxx11_debug_hdf5_regent_pretty:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *hdf5, *regent_pretty]
#   * GASNet-1 (legacy API)
gcc49_cxx11_release_gasnet1_mpi_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *gasnet1_mpi, *legion]
gcc48_cxx11_debug_gasnet1_mpi_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *debug, *cxx11_normal, *gasnet1_mpi, *cmake, *legion, *ctest]
gcc49_cxx11_debug_gasnet1_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *gasnet1_mpi, *regent, *incremental]
#   * Embedded GASNet builds (local and remote, static and shared)
gcc49_cxx11_release_gasnet1_mpi_embedlocal_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *gasnet1_mpi, *gasnet_embed_local, *cmake, *ctest, *legion]
gcc49_cxx11_release_gasnet1_mpi_embedremote_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *gasnet1_mpi, *gasnet_embed_remote, *cmake, *ctest, *legion]
gcc49_cxx11_release_shared_gasnet1_mpi_embedlocal_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *shared, *cxx11_normal, *gasnet1_mpi, *gasnet_embed_local, *cmake, *ctest, *legion]
gcc49_cxx11_release_shared_gasnet1_mpi_embedremote_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *shared, *cxx11_normal, *gasnet1_mpi, *gasnet_embed_remote, *cmake, *ctest, *legion]
#   * GASNet-EX (native API, 2020.11.0+)
gcc49_cxx11_release_gasnetex_mpi_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *gasnetex_mpi, *legion]
gcc49_cxx11_debug_gasnetex_mpi_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *gasnetex_mpi, *cmake, *legion, *ctest, *short]
gcc49_cxx11_debug_gasnetex_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *gasnetex_mpi, *regent, *incremental, *short]
gcc49_cxx11_debug_gasnetex_mpi_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *gasnetex_mpi_debug, *regent, *incremental]
gcc49_cxx11_debug_gasnetex_mpi_nightly_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *gasnetex_mpi_nightly, *regent, *incremental]
#   * GASNet (UCX conduit)
gcc48_cxx11_release_gasnet1_ucx_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *release, *cxx11_normal, *gasnet1_ucx, *legion]
gcc49_cxx11_release_gasnet1_ucx_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *gasnet1_ucx, *cmake, *legion, *ctest]
gcc49_cxx11_release_gasnet1_ucx_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *gasnet1_ucx, *regent, *incremental]
#   * MPI
gcc49_cxx11_release_mpi_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_normal, *mpi, *legion]
gcc49_cxx11_debug_mpi_cmake_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *mpi, *cmake, *legion, *ctest, *short]
gcc49_cxx11_debug_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *mpi, *regent, *incremental]
# * Integration: Python + Regent
gcc49_cxx11_debug_python2_regent:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *python2, *regent]
gcc49_cxx11_debug_python3_regent:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *python3, *regent]
# * Integration: LLVM + GASNet
gcc49_cxx11_debug_llvm_gasnetex_mpi_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *llvm, *gasnetex_mpi, *legion]
gcc49_cxx11_debug_llvm_gasnetex_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *llvm, *gasnetex_mpi, *regent, *incremental]
# * Integration: LLVM + MPI
gcc48_cxx11_debug_llvm_mpi_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *debug, *cxx11_normal, *llvm, *mpi, *legion]
gcc49_cxx11_debug_llvm_mpi_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *llvm, *mpi, *regent, *incremental]
# * Integration: HDF5 + GASNet
gcc48_cxx11_debug_hdf5_gasnetex_mpi_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *debug, *cxx11_normal, *hdf5, *gasnetex_mpi, *legion]
gcc49_cxx11_debug_hdf5_gasnetex_mpi_regent:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *hdf5, *gasnetex_mpi, *regent]
# * Integration: HDF5 + MPI
gcc49_cxx11_debug_hdf5_mpi_legion:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *hdf5, *mpi, *legion]
gcc49_cxx11_debug_hdf5_mpi_regent:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *hdf5, *mpi, *regent]
# Multi-node Legion Spy
#gcc49_cxx11_debug_spy_gasnet1_mpi_regent:
#  <<: [*linux_compute, *image, *tests]
#  variables:
#    <<: [*gcc49, *terra38, *cxx11_normal, *spy, *gasnet1_mpi, *regent, *short]
#gcc49_cxx11_debug_spy_mpi_regent:
#  <<: [*linux_compute, *image, *tests]
#  variables:
#    <<: [*gcc49, *terra38, *cxx11_normal, *spy, *mpi, *regent]
# * Different architectures
gcc49_cxx11_32bit_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_32bit_normal, *legion]
gcc49_cxx11_32bit_release_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc49, *terra38, *release, *cxx11_32bit_normal, *legion]
# * External tests
gcc49_cxx11_debug_external1:
  <<: [*linux_compute, *image, *external_tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *openmp, *hdf5, *external1, *short]
gcc49_cxx11_debug_maxdim4_external2:
  <<: [*linux_compute, *image, *external_tests]
  variables:
    <<: [*gcc49, *terra38, *debug, *cxx11_normal, *maxdim4, *openmp, *hdf5, *external2, *short]

# Linux with Clang 3.8
# * Basic configurations
#   * Release
clang38_cxx11_release_legion_fortran:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_normal, *legion, *fortran]
clang38_cxx11_release_llvm_cmake_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_normal, *llvm, *cmake, *regent, *incremental]
#   * Debug (Privilege and Bounds Checks)
clang38_cxx11_debug_checks_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *checks, *legion]
#   * Spy
clang38_cxx11_debug_spy_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *spy, *legion]
clang38_cxx11_debug_spy_python3_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *spy, *python3, *regent, *parallel, *short]
#   * Prof
clang38_cxx11_release_prof_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_normal, *prof, *regent, *parallel, *short]
#   * C++11
clang38_cxx11_release_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_normal, *legion]
# * Features: one test per feature
#   * OpenMP
clang38_cxx11_debug_openmp_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *openmp, *legion]
clang38_cxx11_debug_openmp_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *openmp, *regent]
#   * Python
clang38_cxx11_debug_python2_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *python2, *legion]
clang38_cxx11_debug_python3_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *python3, *legion]
#   * LLVM
clang38_cxx11_debug_llvm_cmake_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *llvm, *cmake, *legion, *ctest]
clang38_cxx11_debug_llvm_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *llvm, *regent]
#   * HDF5
clang38_cxx11_debug_hdf5_cmake_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *hdf5, *cmake, *legion, *ctest]
clang38_cxx11_debug_hdf5_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *hdf5, *regent]
#   * GASNet
clang38_cxx11_debug_gasnetex_mpi_cmake_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *gasnetex_mpi, *cmake, *legion, *ctest]
clang38_cxx11_debug_gasnetex_mpi_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *gasnetex_mpi, *regent, *incremental]
#   * MPI
clang38_cxx11_debug_mpi_cmake_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *mpi, *cmake, *legion, *ctest]
clang38_cxx11_debug_mpi_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *mpi, *regent, *incremental]
# * Integration: Python + Regent
clang38_cxx11_debug_python2_regent:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *python2, *regent]
clang38_cxx11_debug_python3_regent:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *python3, *regent]
# * Integration: LLVM + GASNet
clang38_cxx11_debug_llvm_gasnetex_mpi_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *llvm, *gasnetex_mpi, *legion]
clang38_cxx11_debug_llvm_gasnetex_mpi_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *llvm, *gasnetex_mpi, *regent, *incremental]
# * Integration: LLVM + MPI
clang38_cxx11_debug_llvm_mpi_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *llvm, *mpi, *legion]
clang38_cxx11_debug_llvm_mpi_regent:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *llvm, *mpi, *regent, *incremental]
# * Integration: HDF5 + GASNet
clang38_cxx11_debug_hdf5_gasnetex_mpi_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *hdf5, *gasnetex_mpi, *legion]
clang38_cxx11_debug_hdf5_gasnetex_mpi_regent:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *hdf5, *gasnetex_mpi, *regent, *incremental]
# * Integration: HDF5 + MPI
clang38_cxx11_debug_hdf5_mpi_legion:
  <<: [*linux_compute, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *hdf5, *mpi, *legion]
clang38_cxx11_debug_hdf5_mpi_regent:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *hdf5, *mpi, *regent, *incremental]
# * Integration: HDF5 + GASNet
# clang38_cxx11_debug_spy_gasnet_regent:
#   <<: [*linux_compute, *image_clang, *tests]
#   variables:
#     <<: [*clang38, *terra38, *debug, *cxx11_normal, *spy, *gasnet, *regent]
# * Different architectures
clang38_cxx11_32bit_debug_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_32bit_normal, *legion]
clang38_cxx11_32bit_release_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang38, *terra38, *release, *cxx11_32bit_normal, *legion]
# * External tests
clang38_cxx11_debug_external1:
  <<: [*linux_compute, *image_clang, *external_tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *openmp, *hdf5, *external1]
clang38_cxx11_debug_maxdim4_external2:
  <<: [*linux_compute, *image_clang, *external_tests]
  variables:
    <<: [*clang38, *terra38, *debug, *cxx11_normal, *maxdim4, *openmp, *hdf5, *external2]

# # macOS with Clang 3.5
# macos_clang38_cxx11_debug:
#   <<: [*macos, *tests]
#   variables:
#     <<: [*clang38, *debug, *cxx11_normal]

# Run minimal tests on other compilers.

# Linux with GCC 4.8, 5, 6, 7, 8
gcc48_cxx11_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *debug, *cxx11_normal, *legion]
gcc48_cxx11_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc48, *terra38, *debug, *cxx11_normal, *regent]
gcc5_cxx11_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc5, *terra38, *debug, *cxx11_normal, *legion]
gcc5_cxx11_debug_normal_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc5, *terra38, *debug, *cxx11_normal, *regent]
gcc6_cxx11_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc6, *terra38, *debug, *cxx11_normal, *legion]
gcc6_cxx11_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc6, *terra38, *debug, *cxx11_normal, *regent]
gcc6_cxx14_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc6, *terra38, *debug, *cxx14_normal, *checks, *legion]
gcc6_cxx14_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc6, *terra38, *debug, *cxx14_normal, *regent]
gcc7_cxx14_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc7, *terra38, *debug, *cxx14_normal, *checks, *legion]
gcc7_cxx14_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc7, *terra38, *debug, *cxx14_normal, *regent]
gcc7_cxx17_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc7, *terra38, *debug, *cxx17_normal, *checks, *legion]
gcc7_cxx17_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc7, *terra38, *debug, *cxx17_normal, *regent]
gcc8_cxx17_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc8, *terra38, *debug, *cxx17_normal, *checks, *legion]
gcc8_cxx17_debug_regent:
  <<: [*linux_compute, *image, *tests]
  variables:
    <<: [*gcc8, *terra38, *debug, *cxx17_normal, *regent]

# GCC 8 with extra hardening
gcc8_cxx11_hardened_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc8, *terra38, *release, *cxx11_hardened, *legion]
gcc8_cxx11_hardened_regent:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*gcc8, *terra38, *release, *cxx11_hardened, *regent, *parallel]

# GCC 9
gcc9_cxx17_debug_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra9, *debug, *cxx17_normal, *legion]
gcc9_cxx17_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra9, *release, *cxx17_normal, *legion]
gcc9_cxx17_debug_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra9, *debug, *cxx17_normal, *regent]
gcc9_cxx17_release_regent_pretty:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra9, *release, *cxx17_normal, *regent_pretty]

# GCC 10
gcc10_cxx17_debug_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra9, *debug, *cxx17_normal, *legion]
gcc10_cxx17_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra9, *release, *cxx17_normal, *legion]
gcc10_cxx17_debug_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra9, *debug, *cxx17_normal, *regent]
gcc10_cxx17_release_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra9, *release, *cxx17_normal, *regent]
gcc10_cxx20_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra9, *release, *cxx20_normal, *legion, *short]

# Clang 9
clang9_cxx17_debug_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang9, *terra9, *debug, *cxx17_normal, *legion]
clang9_cxx17_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang9, *terra9, *release, *cxx17_normal, *legion]
clang9_cxx17_debug_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang9, *terra9, *debug, *cxx17_normal, *regent]
clang9_cxx17_release_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang9, *terra9, *release, *cxx17_normal, *regent]

# Clang 10
clang10_cxx17_debug_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang10, *terra9, *debug, *cxx17_normal, *legion]
clang10_cxx17_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang10, *terra9, *release, *cxx17_normal, *legion]
clang10_cxx17_debug_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang10, *terra9, *debug, *cxx17_normal, *regent]
clang10_cxx17_release_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang10, *terra9, *release, *cxx17_normal, *regent]
clang10_cxx20_debug_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang10, *terra9, *debug, *cxx20_normal, *regent]

clang8_cxx17_debug_legion:
  <<: [*linux, *image, *tests]
  variables:
    <<: [*clang8, *terra38, *debug, *cxx17_normal, *legion]

# CUDA tests:
p100_cuda80_gcc5_cxx11_release_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc5, *release, *cxx11_normal, *p100_cuda80, *legion]
p100_cuda90_gcc6_cxx11_release_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc6, *release, *cxx11_normal, *p100_cuda90, *legion]
p100_cuda92_gcc7_cxx11_release_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc7, *release, *cxx11_normal, *p100_cuda92, *legion]
p100_cuda102_gcc8_cxx11_release_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc8, *release, *cxx11_normal, *p100_cuda102, *legion]
p100_cuda102_gcc8_cxx11_debug_checks_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc8, *debug, *cxx11_normal, *checks, *p100_cuda102, *legion, *short]
p100_cuda102_gcc8_cxx11_release_cmake_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc8, *release, *cxx11_normal, *p100_cuda102, *cmake, *legion, *ctest]
p100_cuda110_gcc9_cxx14_debug_cmake_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc9, *debug, *cxx14_normal, *p100_cuda110, *cmake, *legion, *ctest, *short]
p100_cuda110_gcc9_cxx14_release_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc9, *release, *cxx14_normal, *p100_cuda110, *legion]
p100_cuda112_gcc9_cxx14_debug_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc9, *debug, *cxx14_normal, *p100_cuda112, *legion, *short]
p100_cuda112_gcc9_cxx14_release_cmake_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc9, *release, *cxx14_normal, *p100_cuda112, *cmake, *legion, *ctest]
p100_cuda90_clang7_cxx11_release_cuda_regent:
  <<: [*p100, *tests]
  variables:
    <<: [*clang7, *llvm7, *release, *cxx11_normal, *p100_cuda90, *regent, *short]
p100_cuda90_clang7_cxx11_release_cmake_cuda_regent:
  <<: [*p100, *tests]
  variables:
    <<: [*clang7, *llvm7, *release, *cxx11_normal, *p100_cuda90, *cmake, *regent]

# CUDA+GASNet tests:
p100_cuda112_gcc9_cxx14_debug_gasnetex_mpi_cmake_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc9, *debug, *cxx14_normal, *p100_cuda112, *cmake, *gasnetex_mpi, *legion, *ctest, *short]
p100_cuda112_gcc9_cxx14_release_gasnetex_mpi_cuda_regent:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc9, *llvm9, *release, *cxx14_normal, *p100_cuda112, *gasnetex_mpi, *regent]

# Kokkos tests:
clang8_cxx14_debug_kokkos_legion:
  <<: [*linux, *image_clang, *tests]
  variables:
    <<: [*clang8, *terra38, *debug, *cxx14_normal, *kokkos, *cmake, *legion]
clang9_cxx17_debug_kokkos_openmp_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang9, *terra38, *debug, *cxx17_normal, *kokkos, *openmp, *cmake, *legion]
p100_cuda90_clang7_cxx14_debug_kokkos_cuda_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*clang7, *debug, *cxx14_normal, *p100_cuda90, *kokkos, *cmake, *legion]
p100_cuda90_clang7_cxx14_debug_kokkos_cuda_openmp_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*clang7, *debug, *cxx14_normal, *p100_cuda90, *kokkos, *openmp, *cmake, *legion, *ctest, *short]
p100_cuda102_gcc8_cxx14_debug_kokkos_cuda_openmp_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc8, *debug, *cxx14_normal, *p100_cuda102, *kokkos, *openmp, *cmake, *legion, *ctest]
p100_cuda102_gcc8_cxx14_debug_shared_kokkos_cuda_openmp_legion:
  <<: [*p100, *tests]
  variables:
    <<: [*gcc8, *debug, *shared, *cxx14_normal, *p100_cuda102, *kokkos, *openmp, *cmake, *legion, *ctest, *short]

# Darwin Power9 tests:
darwin_power9_gcc8_cxx17_release_legion:
  <<: [*darwin_power9, *tests]
  variables:
    <<: [*gcc8, *debug, *cxx17_normal, *legion, *darwin_power9_scheduler]
darwin_power9_clang8_cxx17_debug_legion:
  <<: [*darwin_power9, *tests]
  variables:
    <<: [*clang8, *debug, *cxx17_normal, *legion, *darwin_power9_scheduler]

# HPCSDK (nvc++) tests:
hpcsdk212_cxx11_release_legion:
  <<: [*linux, *image_hpcsdk, *tests]
  variables:
    <<: [*hpcsdk212, *release, *cxx11_normal, *legion]
hpcsdk212_cxx11_debug_cmake_legion:
  <<: [*linux, *image_hpcsdk, *tests]
  variables:
    <<: [*hpcsdk212, *debug, *cxx11_normal, *cmake, *legion, *ctest, *short]

# Intel compiler (icc/icpc) tests:
icc212_cxx11_release_legion:
  <<: [*linux, *image_icc, *tests]
  variables:
    <<: [*icc212, *release, *cxx11_normal, *legion]
icc212_cxx11_debug_cmake_legion:
  <<: [*linux, *image_icc, *tests]
  variables:
    <<: [*icc212, *debug, *cxx11_normal, *cmake, *legion, *ctest]

# MSVC (Realm only):
msvc169_realm:
  <<: [*msvc_wine, *image_msvc169, *msvc_tests]
  variables:
    <<: [*short]

# sanitizer tests (Realm only):
gcc9_tsan_realm:
  <<: [*linux, *image_2004, *realm_sanitizer_tests]
  variables:
    <<: [*gcc9, *cxx11_normal, *tsan, *short]
gcc9_ubsan_realm:
  <<: [*linux, *image_2004, *realm_sanitizer_tests]
  variables:
    <<: [*gcc9, *cxx11_normal, *ubsan, *short]
gcc9_asan_realm:
  <<: [*linux, *image_2004, *realm_sanitizer_tests]
  variables:
    <<: [*gcc9, *cxx11_normal, *asan, *short]
