###
### Variables
###

# Global variables (will be set in every job):
variables:
  WARN_AS_ERROR: "1"
  # MAKEFLAGS: "-s"
  REALM_BACKTRACE: "1"
  UCX_HANDLE_ERRORS: "none" # Disable UCX-based backtrace.
  REALM_SYNTHETIC_CORE_MAP: "" # Disable Realm thread pinning.
  TIMELIMIT: "600"  # each test should take less than 10 minutes
  USE_DEFCHECK: "1"
  CCACHE_BASEDIR: "$CI_PROJECT_DIR"
  DEP_CACHE: "$CI_PROJECT_DIR/.cache/deps"
  CCACHE_MAXSIZE: "400M"
  CCACHE_DIR: "$CI_PROJECT_DIR/.cache/ccache"
  CCACHE_COMPRESS: "true"
  CCACHE_COMPRESS_LEVEL: "6"
  USE_CCACHE: "1"
  CPM_SOURCE_CACHE: $CI_PROJECT_DIR/.cache/cpm_src
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  REALM_DEFAULT_ARGS: "-ll:report_sparsity_leaks" # Check no sparsity maps are leaked
  GASNET_SHA256: "f3b379b2c650b8deb24e33ca101303c1af2482e996e603291ebf16c02a708da1"
  GASNET_COMMIT: "3db4ea2f92ea6bfba6fe9538cb001b6a34b2f373"
  # Set these to override the local realm source check out
  REALM_URL: ""
  REALM_SHA256: ""
  REALM_COMMIT: ""

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        CACHE_POLICY: pull-push
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      variables:
        CACHE_POLICY: pull

cache: &global_cache
  - key: "$CI_JOB_NAME"
    paths:
      - $CCACHE_DIR
    policy: $CACHE_POLICY
  - key: "cpm_src_cache"
    paths:
      - $CPM_SOURCE_CACHE
  - key: "external-deps"
    paths:
      - $DEP_CACHE
    policy: $CACHE_POLICY
  - key:
      files:
        - tools/legion_prof_rs/Cargo.lock
      prefix: cargo
    paths:
      - $CARGO_HOME
      - tools/legion_prof_rs/target/
    policy: $CACHE_POLICY

# Local variables (included on a case-by-case basis in each job):
.no_ccache: &no_ccache
  USE_CCACHE: "0"

.gcc9: &gcc9
  CC:  "gcc-9"
  CXX: "g++-9"
  F90: "gfortran-9"
.gcc10: &gcc10
  CC:  "gcc-10"
  CXX: "g++-10"
  F90: "gfortran-10"
.gcc11: &gcc11
  CC:  "gcc-11"
  CXX: "g++-11"
  F90: "gfortran-11"
.gcc12: &gcc12
  CC:  "gcc-12"
  CXX: "g++-12"
  F90: "gfortran-12"

.clang10: &clang10
  CC:  "clang-10"
  CXX: "clang++-10"
  F90: "gfortran-7"
.clang12: &clang12
  CC:  "clang-12"
  CXX: "clang++-12"
  F90: "gfortran-9"
.clang14: &clang14
  CC:  "clang-14"
  CXX: "clang++-14"
  F90: "gfortran-11"
.hpcsdk251: &hpcsdk251
  CC: "/opt/nvidia/hpc_sdk/Linux_x86_64/25.1/compilers/bin/nvc"
  CXX: "/opt/nvidia/hpc_sdk/Linux_x86_64/25.1/compilers/bin/nvc++"
  F90: "/opt/nvidia/hpc_sdk/Linux_x86_64/25.1/compilers/bin/nvfortran"
  # cmake gets confused and can't figure out library arch
  EXTRA_CMAKE_ARGS: "-DCMAKE_LIBRARY_ARCHITECTURE=x86_64-linux-gnu"
.icc212: &icc212
  CC: "/opt/intel/oneapi/compiler/2023.1.0/linux/bin/icx"
  CXX: "/opt/intel/oneapi/compiler/2023.1.0/linux/bin/icpx"
  F90: "/opt/intel/oneapi/compiler/2023.1.0/linux/bin/ifx"
  # work around obnoxious warnings about -g without -O0
  EXTRA_CMAKE_ARGS: "-DCMAKE_CXX_FLAGS_DEBUG='-g -O0'"
  # for libsvml.so, auto-linked by newer Intel compilers
  LD_LIBRARY_PATH: "/opt/intel/oneapi/compiler/2023.1.0/linux/compiler/lib/intel64_lin"
.macos_clang: &macos_clang # on macOS, we don't control the compiler version
  CC:  "clang"
  CXX: "clang++"

.terra12: &terra12
  TERRA_DIR: "/usr/local/terra12"
.terra13: &terra13 # macOS only
  TERRA_DIR: "/usr/local/terra-13"
.terra14: &terra14
  TERRA_DIR: "/usr/local/terra14"

.llvm12: &llvm12
  LLVM_CONFIG: "llvm-config-12"
.llvm14: &llvm14
  LLVM_CONFIG: "llvm-config-14"

.debug: &debug
  DEBUG: "1"
.release: &release
  DEBUG: "0"

.maxdim4: &maxdim4
  MAX_DIM: "4"      # test up to 4-D (needed for HTR external test)
.maxdim5: &maxdim5
  MAX_DIM: "5"      # test up to 5-D (useful because 1-4 have special cases)

.spy: &spy
  USE_SPY: "1"
  BASH_ENV: "/root/.cargo/env" # make sure Cargo environment gets loaded

.checks: &checks
  BOUNDS_CHECKS: "1"
  PRIVILEGE_CHECKS: "1"

.cxx17_normal: &cxx17_normal
  CXXFLAGS: ""
  CXX_STANDARD: "17"
.cxx17_external: &cxx17_external
  CXXFLAGS: ""
  CXX_STANDARD: "17"
  # Extra flags here for external projects that don't enforce C++ versions correctly
  CXX_FLAGS: "-std=c++17"
  NVCC_FLAGS: "-std=c++17"
.cxx17_hardened: &cxx17_hardened
  CXXFLAGS: "-D_FORTIFY_SOURCE=2 -D_GLIBCXX_ASSERTIONS"
  CXX_STANDARD: "17"
.cxx17_precise: &cxx17_precise
  # Intel compilers turn on some overly aggressive optimizations by default
  CXXFLAGS: "-fp-model=precise"
  CXX_STANDARD: "17"
.cxx20_normal: &cxx20_normal
  CXXFLAGS: ""
  CXX_STANDARD: "20"
.cxx17_32bit_normal: &cxx17_32bit_normal
  CFLAGS: "-m32"
  CXXFLAGS: "-m32"
  LDFLAGS: "-m32 -latomic"
  MARCH: "i686"
  CXX_STANDARD: "17"
.shared: &shared
  SHARED_OBJECTS: "1"

.openmp: &openmp
  USE_OPENMP: "1"
.openmp_system: &openmp_system
  USE_OPENMP_SYSTEM_RUNTIME: "1"
.python3: &python3
  USE_PYTHON: "1"
  # FIXME: It would be nice to find a better way to do this,
  # but the alternatives look scary
  PYTHON_EXE: "python3"
  PYTHON_LIB: "/usr/lib/x86_64-linux-gnu/libpython3.8.so"
  PYTHON_VERSION_MAJOR: "3"
  TEST_PYTHON_EXE: "python3"
.hdf5: &hdf5
  USE_HDF: "1"
  HDF_HEADER: "hdf5/serial/hdf5.h"
  HDF_LIBNAME: "hdf5_serial"
.fortran: &fortran
  LEGION_USE_FORTRAN: "1"
.llvm: &llvm
  USE_LLVM: "1"
.cuda: &cuda
  USE_CUDA: "1"
  USE_NVTX: "1"
.cuda_dynamic: &cuda_dynamic
  EXTRA_CMAKE_ARGS: "-DLegion_CUDA_DYNAMIC_LOAD=ON -DLegion_HIJACK_CUDART=OFF"
.gasnet1_mpi: &gasnet1_mpi
  REALM_NETWORKS: "gasnet1"
  CONDUIT: "mpi"
.gasnetex_mpi: &gasnetex_mpi
  REALM_NETWORKS: "gasnetex"
  CONDUIT: "mpi"
.gasnetex_mpi_debug: &gasnetex_mpi_debug
  REALM_NETWORKS: "gasnetex"
  CONDUIT: "mpi"
  GASNET_DEBUG: "1"
  # GASNet headers are not guaranteed to be warning-free in debug mode
  WARN_AS_ERROR: "0"
.gasnetex_mpi_stable: &gasnetex_mpi_stable
  REALM_NETWORKS: "gasnetex"
  CONDUIT: "mpi"
  GASNET_VERSION: "GASNet-stable"
.gasnetex_ucx : &gasnetex_ucx
  REALM_NETWORKS: "gasnetex"
  CONDUIT: "ucx"
  UCX_VERSION: "1.14.1"
  UCX_SHA256: "baa0634cafb269a3112f626eb226bcd2ca8c9fcf0fec3b8e2a3553baad5f77aa"
  UCX_WARN_UNUSED_ENV_VARS: "n"
.gasnetex_wrapper: &gasnetex_wrapper
  USE_GASNETEX_WRAPPER: "1"
.gasnet1_ucx : &gasnet1_ucx
  REALM_NETWORKS: "gasnet1"
  CONDUIT: "ucx"
  UCX_VERSION: "1.14.1"
  UCX_SHA256: "baa0634cafb269a3112f626eb226bcd2ca8c9fcf0fec3b8e2a3553baad5f77aa"
  UCX_WARN_UNUSED_ENV_VARS: "n"
.gasnet_embed_local : &gasnet_embed_local
  EMBED_GASNET: "1"
  EMBED_GASNET_LOCAL: "1"
.gasnet_embed_remote : &gasnet_embed_remote
  EMBED_GASNET: "1"
.mpi: &mpi
  REALM_NETWORKS: "mpi"
  # mpich-3.2
  MPIR_CVAR_CH3_NOLOCAL: "1"
  # mpich-3.3 & above
  MPIR_CVAR_NOLOCAL: "1"
  USE_MPI: "1"
.ucx: &ucx
  REALM_NETWORKS: "ucx"
  UCX_VERSION: "1.14.1"
  UCX_SHA256: "baa0634cafb269a3112f626eb226bcd2ca8c9fcf0fec3b8e2a3553baad5f77aa"
  UCC_VERSION: "1.3.0"
  UCC_SHA256: "b56379abe5f1c125bfa83be305d78d81a64aa271b7b5fff0ac17b86725ff3acf"
  UCX_WARN_UNUSED_ENV_VARS: "n"
  # mpi_interop example requires MPI to build correctly
  USE_MPI: "1"
.ucx_dynamic: &ucx_dynamic
  EXTRA_CMAKE_ARGS: "-DLegion_UCX_DYNAMIC_LOAD=ON"
.cmake: &cmake
  USE_CMAKE: "1"
.kokkos: &kokkos
  USE_KOKKOS: "1"
  USE_CCACHE: "0"
  USE_DEFCHECK: "0"
  KOKKOS_TAG: "4.0.01"
  KOKKOS_SHA256: "bb942de8afdd519fd6d5d3974706bfc22b6585a62dd565c12e53bdb82cd154f0"
  KKERNELS_SHA256: "3f493fcb0244b26858ceb911be64092fbf7785616ad62c81abde0ea1ce86688a"

.prof: &prof
  USE_PROF: "1"
  BASH_ENV: "/root/.cargo/env" # make sure Cargo environment gets loaded

.legion: &legion
  TEST_REGENT: "0"
  LEGION_WARNINGS_FATAL: "1"

.realm: &realm # test realm using makefile
  TEST_REALM: "1"

.ctest: &ctest
  TEST_CTEST: "1"

# The realm unit tests only works on single node
.realm_unit_ctest: &realm_unit_ctest
  TEST_REALM_UNIT_CTEST: "1"

.regent: &regent
  TEST_LEGION_CXX: "0"
  TEST_REALM: "0"
  TEST_FUZZER: "0"
  NO_PRETTY: "1"
.regent_pretty: &regent_pretty
  TEST_LEGION_CXX: "0"
  TEST_REALM: "0"
  TEST_FUZZER: "0"
  REGENT_SAFE_COMPILER: "1"
.parallel: &parallel
  REGENT_JOBS: "2"
.incremental: &incremental
  REGENT_INCREMENTAL: "1"

.external1: &external1
  TEST_PY_ARGS: "--test=external1"
.external2: &external2
  TEST_PY_ARGS: "--test=external2"
.private: &private
  TEST_PY_ARGS: "--test=private"

.tsan: &tsan
  SANITIZER_TYPE: "TSAN"
.ubsan: &ubsan
  SANITIZER_TYPE: "UBSAN"
  UBSAN_OPTIONS: "print_stacktrace=1:halt_on_error=1"
.asan: &asan
  SANITIZER_TYPE: "ASAN"

.jupyter: &jupyter
  TEST_JUPYTER: "1"
  TEST_PY_ARGS: "--test=jupyter"

.cpptrace: &cpptrace
  REALM_BACKTRACE_USE_CPPTRACE: "1"

.nocr: &nocr
  REGENT_LEGION_REPLICABLE: "0"

###
### Setup
###

# These commands will run before each job.
before_script:
  - set -e
  - uname -a
  - mkdir -p $DEP_CACHE
  - |
    if [[ "$(uname)" = "Linux" ]]; then
      export THREADS=$(nproc --all)
    elif [[ "$(uname)" = "Darwin" ]]; then
      export THREADS=$(sysctl -n hw.ncpu)
    else
      echo "Unknown platform. Setting THREADS to 1."
      export THREADS=1
    fi
  - |
    if [[ "$UCX_VERSION" != "" ]]; then
      mkdir -p ucx
      cd ucx
      if ! echo "$UCX_SHA256  $DEP_CACHE/ucx-$UCX_VERSION.tar.gz" | shasum -a 256 -c; then 
        curl -sL https://github.com/openucx/ucx/releases/download/v$UCX_VERSION/ucx-$UCX_VERSION.tar.gz -o $DEP_CACHE/ucx-$UCX_VERSION.tar.gz
        echo "$UCX_SHA256  $DEP_CACHE/ucx-$UCX_VERSION.tar.gz" | shasum -a 256 -c
      fi
      tar --strip-components=1 -zxf $DEP_CACHE/ucx-$UCX_VERSION.tar.gz
      export UCX_ROOT=$PWD/install
      export ucx_ROOT=$UCX_ROOT
      if [[ -n "$CUDA" ]]; then
        UCX_CONFIG_OPTS="--with-cuda=$CUDA"
        # CI tests are run on a single node. So disable shared-memory and cuda ipc
        # transports to be able to test some network functionality.
        export UCX_TLS=^sm,cuda_ipc
      else
        UCX_CONFIG_OPTS="--without-cuda"
        export UCX_TLS=^sm
      fi
      contrib/configure-release-mt --prefix=$UCX_ROOT $UCX_CONFIG_OPTS
      make -j8 install
      export PATH=$PATH:$UCX_ROOT/bin
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$UCX_ROOT/lib
      export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$UCX_ROOT
      cd -
    fi
    if [[ "$UCC_VERSION" != "" ]]; then
      apt update -qq -yy && apt install -qq -yy autoconf automake libtool # needed for autogen.sh
      mkdir -p ucc
      cd ucc
      if ! echo "$UCC_SHA256  $DEP_CACHE/ucc-$UCC_VERSION.tar.gz" | shasum -a 256 -c; then
        curl -sL https://github.com/openucx/ucc/archive/refs/tags/v$UCC_VERSION.tar.gz -o $DEP_CACHE/ucc-$UCC_VERSION.tar.gz
        echo "$UCC_SHA256  $DEP_CACHE/ucc-$UCC_VERSION.tar.gz" | shasum -a 256 -c
      fi
      tar --strip-components=1 -zxf $DEP_CACHE/ucc-$UCC_VERSION.tar.gz
      export UCC_ROOT=$PWD/install
      export ucc_ROOT=$UCC_ROOT

      # Remove offload-arch=native.
      sed -i 's/--offload-arch=native//g' ./cuda_lt.sh

      ./autogen.sh
      ./configure --prefix=$UCC_ROOT --with-ucx=$UCX_ROOT --without-rocm
      make -j8 install
      export PATH=$PATH:$UCC_ROOT/bin
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$UCC_ROOT/lib
      export CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$UCC_ROOT
      cd -
    fi
    if [[ "$REALM_NETWORKS" != "" ]]; then
      # OpenMPI:
      # export LAUNCHER="mpirun -n 2 -x TERRA_PATH -x INCLUDE_PATH -x LD_LIBRARY_PATH -x LG_RT_DIR"
      # MPICH:
      export LAUNCHER="mpirun -n 2"
      export MPICH_CXX=${CXX}
      if [[ "$REALM_NETWORKS" == gasnet* ]]; then
        if [[ "$EMBED_GASNET" -eq 1 ]]; then
          if [[ "$EMBED_GASNET_LOCAL" -eq 1 ]]; then
            # clone gasnet, but make it read only since we want an embedded build
            if ! echo "$GASNET_SHA256  $DEP_CACHE/gasnet-${GASNET_COMMIT}.tar.gz" | shasum -a 256 -c; then
              curl -sL https://github.com/StanfordLegion/gasnet/archive/${GASNET_COMMIT}.tar.gz -o ${DEP_CACHE}/gasnet-${GASNET_COMMIT}.tar.gz
              echo "$GASNET_SHA256  $DEP_CACHE/gasnet-${GASNET_COMMIT}.tar.gz" | shasum -a 256 -c
            fi
            tar -zxf ${DEP_CACHE}/gasnet-${GASNET_COMMIT}.tar.gz
            rm -rf gasnet
            mv gasnet-${GASNET_COMMIT} gasnet
            chmod -R a-w gasnet
            export EMBED_GASNET_SRC="$PWD/gasnet"
          fi
        else
          if ! echo "$GASNET_SHA256  $DEP_CACHE/gasnet-${GASNET_COMMIT}.tar.gz" | shasum -a 256 -c; then
            curl -sL https://github.com/StanfordLegion/gasnet/archive/${GASNET_COMMIT}.tar.gz -o ${DEP_CACHE}/gasnet-${GASNET_COMMIT}.tar.gz
            echo "$GASNET_SHA256  $DEP_CACHE/gasnet-${GASNET_COMMIT}.tar.gz" | shasum -a 256 -c
          fi
          tar -zxf ${DEP_CACHE}/gasnet-${GASNET_COMMIT}.tar.gz
          rm -rf gasnet
          mv gasnet-${GASNET_COMMIT} gasnet
          make -C gasnet -j$THREADS
          if [[ "$GASNET_DEBUG" -eq 1 ]]; then
            export GASNET_ROOT="$PWD/gasnet/debug"
          else
            export GASNET_ROOT="$PWD/gasnet/release"
          fi
        fi
        export REALM_GASNETEX_WRAPPER=${CI_PROJECT_DIR}/tmp-build/build/lib/librealm_gex_wrapper.so
      fi
    fi
  - |
    if [ "$USE_CCACHE" -eq 1 ]; then
      ccache --zero-stats
      ccache --show-stats
    fi
  - |
    (find $CARGO_HOME -type f -print0 | perl -0ne 'END {print $.}') || true
  - |
    (find $CI_PROJECT_DIR/tools/legion_prof_rs/target -type f -print0 | perl -0ne 'END {print $.}') || true
  - |
    # Download (and cache) the requested cmake version and set up the path accordingly 
    if [[ ! -z "$CMAKE_SHA256" ]]; then
      if ! echo "$CMAKE_SHA256  $DEP_CACHE/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz" | shasum -a 256 -c; then
        curl -sL https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz -o $DEP_CACHE/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
        echo "$CMAKE_SHA256  $DEP_CACHE/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz" | shasum -a 256 -c
      fi
      rm -rf /cmake-${CMAKE_VERSION}-linux-x86_64
      tar -C / -zxf $DEP_CACHE/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz
      export PATH=/cmake-${CMAKE_VERSION}-linux-x86_64/bin:$PATH
      which cmake
    fi
  - |
    if [[ "$USE_CUDA" -eq 1 ]]; then
      # make sure dynamic loading finds the right libcudart.so
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${CUDA}/lib64"
      export PATH=$PATH:${CUDA}/bin
      # Try to use the stubs over the driver
      export CUDA_PATH="${CUDA}"
      export CUDA_ROOT="${CUDA}"
      # Ensure nvcc's HOST compiler is set to our CXX compiler
      export CUDAHOSTCXX="$CXX"
    fi
  - |
    if [[ "$USE_KOKKOS" -eq 1 ]]; then
      if ! echo "$KOKKOS_SHA256  $DEP_CACHE/kokkos-$KOKKOS_TAG.tar.gz" | shasum -a 256 -c; then
        curl -sL https://github.com/kokkos/kokkos/archive/refs/tags/$KOKKOS_TAG.tar.gz -o $DEP_CACHE/kokkos-$KOKKOS_TAG.tar.gz
        echo "$KOKKOS_SHA256  $DEP_CACHE/kokkos-$KOKKOS_TAG.tar.gz" | shasum -a 256 -c
      fi
      tar -zxf $DEP_CACHE/kokkos-$KOKKOS_TAG.tar.gz
      rm -rf kokkos
      mv kokkos-$KOKKOS_TAG kokkos
      mkdir -p kokkos/build
      cd kokkos/build
      KOKKOS_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=${CXX_STANDARD} -DCMAKE_POSITION_INDEPENDENT_CODE=ON"
      # the following line is a workaround for Kokkos issue #2652
      KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DCMAKE_CXX_FLAGS=-DKOKKOS_IMPL_TURN_OFF_CUDA_HOST_INIT_CHECK"
      if [[ "$USE_OPENMP" -eq 1 ]]; then
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_OPENMP=ON"
      else
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_SERIAL=ON"
      fi
      KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DBUILD_SHARED_LIBS=ON"
      if [[ "$USE_CUDA" -eq 1 ]]; then
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_ENABLE_CUDA=ON -DKokkos_ENABLE_CUDA_LAMBDA=ON -DKokkos_ENABLE_CUDA_UVM=OFF"
        # Force Kokkos build to always use the nvcc wrapper (even for clang)
        # This allows kokkos to build SASS and PTX in a forward compatible way,
        # allowing older toolkits to work on newer GPUs in CI
        # This still requires a patch to Kokkos, coming in 4.0:
        # https://github.com/kokkos/kokkos/pull/5527
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DCMAKE_CXX_COMPILER=$(realpath ../bin)/nvcc_wrapper"
        export NVCC_WRAPPER_DEFAULT_COMPILER="$CXX"
        #KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DKokkos_CUDA_DIR=${CUDA}"

        # kokkos expects (the right) nvcc to be in the path, both for toolkit
        #  detection as well as for nvcc_wrapper (if used)
        PATH=$PATH:${CUDA}/bin
      else
        KOKKOS_CMAKE_OPTS="$KOKKOS_CMAKE_OPTS -DCMAKE_CXX_COMPILER=$CXX"
      fi
      echo cmake $KOKKOS_CMAKE_OPTS ..
      cmake $KOKKOS_CMAKE_OPTS ..
      make -j$THREADS install
      cd ../..
      # tell cmake where to find the Kokkos install
      export Kokkos_DIR=`pwd`/kokkos/install
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$Kokkos_DIR/lib

      if ! echo "$KKERNELS_SHA256  $DEP_CACHE/kokkoskernels-$KOKKOS_TAG.tar.gz" | shasum -a 256 -c; then
        curl -sL https://github.com/kokkos/kokkos-kernels/archive/refs/tags/$KOKKOS_TAG.tar.gz -o $DEP_CACHE/kokkoskernels-$KOKKOS_TAG.tar.gz
        echo "$KKERNELS_SHA256  $DEP_CACHE/kokkoskernels-$KOKKOS_TAG.tar.gz" | shasum -a 256 -c
      fi
      tar -zxf $DEP_CACHE/kokkoskernels-$KOKKOS_TAG.tar.gz
      rm -rf kokkos-kernels
      mv kokkos-kernels-$KOKKOS_TAG kokkos-kernels

      # now build kokkos-kernels
      mkdir -p kokkos-kernels/build
      cd kokkos-kernels/build
      KKERNELS_CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_STANDARD=${CXX_STANDARD} -DCMAKE_CXX_FLAGS='-fPIC'"
      # FIXME (Wei): disable sparse for now because it does not compile
      KKERNELS_CMAKE_OPTS="$KKERNELS_CMAKE_OPTS -DCMAKE_CXX_COMPILER=${KOKKOS_CXX_COMPILER} -DKokkosKernels_ENABLE_ALL_COMPONENTS=OFF -DKokkosKernels_ENABLE_COMPONENT_BLAS=ON -DKokkosKernels_ENABLE_COMPONENT_SPARSE=OFF"
      if [[ "$SHARED_OBJECTS" -eq 1 ]]; then
        KKERNELS_CMAKE_OPTS="$KKERNELS_CMAKE_OPTS -DBUILD_SHARED_LIBS=ON"
      fi
      echo cmake $KKERNELS_CMAKE_OPTS ..
      cmake $KKERNELS_CMAKE_OPTS ..
      make -j$THREADS install
      cd ../..
      # tell cmake where to find the Kokkos install
      export KokkosKernels_DIR=`pwd`/kokkos-kernels/install

      # enable WAR for: https://github.com/kokkos/kokkos-kernels/issues/757
      # Keep the sparsity refcounting flag around when overwriting REALM_DEFAULT_ARGS
      export REALM_DEFAULT_ARGS="-cuda:nongpusync 0 -ll:report_sparsity_leaks"

      if [[ "$USE_CUDA" -eq 1 ]]; then
        # There are warnings when compiling kokkos_interop.cc, so disable WARN_AS_ERROR
        export WARN_AS_ERROR=0
      fi
    fi


###
### Tags
###

.linux: &linux
  tags:
    - linux
.macos: &macos
  tags:
    - macos

# For compute-heavy tests:
.linux_compute: &linux_compute
  tags:
    - linux
    - compute

# For tests that require AVX:
.linux_avx: &linux_avx
  tags:
    - linux
    - avx

# For CUDA tests, always use a CUDA-capable machine:
.nvidia: &nvidia
  tags:
    - nvidia

.cuda_base: &cuda_base
  IS_NVIDIA_JOB: "1"
  USE_CUDA: "1"
  # docker puts both 32 and 64 bit libcuda.so's in LD_LIBRARY_PATH, but that confuses Kokkos's cmake
  LD_LIBRARY_PATH: "/usr/local/nvidia/lib64"

.cuda117: &cuda117
  <<: *cuda_base
  CUDA: "/usr/local/cuda-11.7"
  CUDA_TOOLKIT_ROOT: "$CUDA"
  CUDA_HOME: "$CUDA"
  USE_NVTX: "1"

.cuda121: &cuda121
  <<: *cuda_base
  CUDA: "/usr/local/cuda-12.1"
  CUDA_TOOLKIT_ROOT: "$CUDA"
  CUDA_HOME: "$CUDA"
  USE_NVTX: "1"

.cuda125: &cuda125
  <<: *cuda_base
  CUDA: "/usr/local/cuda-12.5"
  CUDA_TOOLKIT_ROOT: "$CUDA"
  CUDA_HOME: "$CUDA"
  USE_NVTX: "1"

.hip_cuda: &hip_cuda125
  IS_NVIDIA_JOB: "1"
  USE_HIP: "1"
  HIP_TARGET: "CUDA"
  # Unfortunately HIP cmake integration with nvidia backend requires 3.28+
  CMAKE_VERSION: "4.0.3"
  CMAKE_SHA256: "585ae9e013107bc8e7c7c9ce872cbdcbdff569e675b07ef57aacfb88c886faac"
  # rocm 6.x requires cuda 12.x
  CUDA: "/usr/local/cuda-12.5"
  CUDA_PATH: "/usr/local/cuda-12.5"
  # docker puts both 32 and 64 bit libcuda.so's in LD_LIBRARY_PATH, but that confuses Kokkos's cmake
  LD_LIBRARY_PATH: "/usr/local/nvidia/lib64"
  WARN_AS_ERROR: "0"
  ROCM_PATH: "/opt/rocm"
  HIPCC_FLAGS: "-gencode=arch=compute_60,code=sm_60 -gencode=arch=compute_70,code=sm_70 -gencode=arch=compute_75,code=sm_75 -gencode=arch=compute_80,code=sm_80 -gencode=arch=compute_80,code=compute_80"

###
### Docker Image
###

# Each job will run in a fresh container with this image.
.image_2004: &image_2004
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-20.04:250509
.image_2204: &image_2204
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-22.04:250509
.image_2404: &image_2404
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-24.04:250509
.image_hpcsdk: &image_hpcsdk
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-hpcsdk:250509
.image_icc: &image_icc
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-icc:250509
.image_msvc178: &image_msvc178
  image: registry.gitlab.com/stanfordlegion/legion/gitlab-ci-msvc:250206

###
### Tests
###

# rules for which jobs will run
.test_rules: &test_rules
  rules:
    # some jobs are tagged and can only run on certain hardware - a CI variable
    #  is used to enable these jobs in case that hardware is offline
    - if: '$IS_NVIDIA_JOB == "1" && $RUN_P100_JOBS != "1"'
      when: never
    # some scheduled runs are only looking at specific subsets of functionality
    - if: '$ONLY_KOKKOS_JOBS == "1" && $USE_KOKKOS != "1"'
      when: never
    # Do not automatically run a push branch pipeline if there is an open merge request
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"'
      when: never
    # commits only run a short suite of jobs
    - if: '$CI_PIPELINE_SOURCE =~ "push|merge_request_event" && $IS_SHORT_JOB != "1"'
      when: never
    # if none of the above exclusions apply, run the job
    - when: always

.short: &short
  IS_SHORT_JOB: "1"

# Each job will run this set of tests.
.tests: &tests
  <<: *test_rules
  script:
    - ./tools/add_github_host_key.sh
    - grep 'model name' /proc/cpuinfo | uniq -c || true
    - which $CXX
    - $CXX --version
    - |
      if [[ ! -z "${REALM_URL}" ]]; then
        # Replace realm with the one given
        rm -rf realm
        if ! echo "$REALM_SHA256  $DEP_CACHE/realm-$REALM_COMMIT.tar.gz" | shasum -a 256 -c; then
          curl -sL "${REALM_URL}" -o ${DEP_CACHE}/realm-${REALM_COMMIT}.tar.gz
          echo "$REALM_SHA256  $DEP_CACHE/realm-$REALM_COMMIT.tar.gz" | shasum -a 256 -c
        fi
        tar -zxf ${DEP_CACHE}/realm-${REALM_COMMIT}.tar.gz
        mv realm-* realm
      fi
      mkdir -p realm/build realm/install
      REALM_CMAKE_ARGS="-DGASNet_ROOT="${GASNET_ROOT}" -DKokkos_ROOT="${Kokkos_DIR}" -DCPPTRACE_GET_SYMBOLS_WITH_NOTHING=ON -DREALM_BUILD_TESTS=ON -DREALM_BUILD_BENCHMARKS=ON -DCMAKE_HIP_PLATFORM=nvidia -DREALM_LOG_LEVEL=INFO"
      if [[ "${REALM_NETWORKS}" != "ucx" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_UCX=OFF";
      else REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_UCX=ON"; fi
      if [[ -z "${GASNET_ROOT}${EMBED_GASNET}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_GASNETEX=OFF";
      else REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_GASNETEX=ON"; fi
      if [[ -z "${Kokkos_DIR}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_KOKKOS=OFF"; else REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_KOKKOS=ON"; fi
      if [[ "${DEBUG}" -eq 1 ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Debug"; fi
      # Don't use ccache with kokkos, as its wrapper scripts can't handle it
      if [[ "${USE_CCACHE}${Kokkos_DIR}" -eq 1 ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"; fi
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_CPPTRACE=${REALM_BACKTRACE_USE_CPPTRACE:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_PREALM=${USE_PROF:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_CUDA=${USE_CUDA:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_NVTX=${USE_NVTX:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_HIP=${USE_HIP:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_MPI=${USE_MPI:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_HDF5=${USE_HDF:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_OPENMP=${USE_OPENMP:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_PYTHON=${USE_PYTHON:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_MAX_DIM=${MAX_DIM:-3}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DCMAKE_MACOSX_RPATH=OFF -DCMAKE_CXX_FLAGS='${CXXFLAGS}' -DCMAKE_C_FLAGS='${CFLAGS}'"
      echo cmake -S realm -B realm/build -DCMAKE_INSTALL_PREFIX=realm/install -DBUILD_SHARED_LIBS=ON $REALM_CMAKE_ARGS
      bash -c "cmake -S realm -B realm/build -DCMAKE_INSTALL_PREFIX=realm/install -DBUILD_SHARED_LIBS=ON $REALM_CMAKE_ARGS"
      cmake --build realm/build --parallel $THREADS
      ctest --test-dir realm/build --parallel $THREADS --output-on-failure
      cmake --install realm/build
      # Temporary hack for some regent builds that need to be updated to use the correct include paths
      cp realm/install/include/realm_defines.h runtime/realm
      export Realm_ROOT="$(pwd)/realm/install"
      export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${Realm_ROOT}/lib
    - |
      if [[ "$USE_DEFCHECK" -eq 1 ]]; then
        export DEFCHECK_CXX="${CXX}"
        export CXX=`pwd`/tools/cxx_defcheck
        # if we're using MPI, make sure mpicxx uses the right compiler too
        export OMPI_CXX=$CXX
        export MPICH_CXX=$CXX
        # if we're using kokkos, make sure nvcc_wrapper uses the right compiler too
        export NVCC_WRAPPER_DEFAULT_COMPILER=$CXX
      fi
    - |
      if [[ -z "$TEST_PYTHON_EXE" ]]; then
        export TEST_PYTHON_EXE=`which python3 python | head -1`
      fi
    - |
      if [[ "$USE_CCACHE" -eq 1 ]]; then
          export EXTRA_CMAKE_ARGS="${EXTRA_CMAKE_ARGS} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_CUDA_COMPILER_LAUNCHER=ccache"
      fi
    - |
      if [[ -n "$CXX_STANDARD" ]]; then
        export EXTRA_CMAKE_ARGS="${EXTRA_CMAKE_ARGS} -DCMAKE_CXX_STANDARD=${CXX_STANDARD} -DCMAKE_CUDA_STANDARD=${CXX_STANDARD}"
      fi
    - $TEST_PYTHON_EXE ./test.py --tmp-dir ${CI_PROJECT_DIR}/tmp-build
    - |
      if [[ "$USE_CCACHE" -eq 1 ]]; then
        ccache --show-stats
      fi
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - language/test_output/
  # retry:
  #   max: 0
  #   when:
  #     - runner_system_failure
  #     - unknown_failure

# Some additional tests are only run on certain configurations.
.external_tests: &external_tests
  <<: *test_rules
  script:
    - ./tools/add_github_host_key.sh
    - |
      if [[ -n $GITLAB_DEPLOY_KEY ]]; then
        eval $(ssh-agent -s)
        ssh-add <(echo "$GITLAB_DEPLOY_KEY")
      fi
    - unset USE_DEFCHECK
    - |
      if [[ -z "$TEST_PYTHON_EXE" ]]; then
        export TEST_PYTHON_EXE=`which python3 python | head -1`
      fi
    - |
      if [[ ! -z "${REALM_URL}" ]]; then
        # Replace realm with the one given
        rm -rf realm
        if ! echo "$REALM_SHA256  $DEP_CACHE/realm-$REALM_COMMIT.tar.gz" | shasum -a 256 -c; then
          curl -sL "${REALM_URL}" -o ${DEP_CACHE}/realm-${REALM_COMMIT}.tar.gz
          echo "$REALM_SHA256  $DEP_CACHE/realm-$REALM_COMMIT.tar.gz" | shasum -a 256 -c
        fi
        tar -zxf ${DEP_CACHE}/realm-${REALM_COMMIT}.tar.gz
        mv realm-* realm
      fi
      mkdir -p realm/build realm/install
      REALM_CMAKE_ARGS="-DGASNet_ROOT="${GASNET_ROOT}" -DKokkos_ROOT="${Kokkos_DIR}" -DCPPTRACE_GET_SYMBOLS_WITH_NOTHING=ON -DREALM_BUILD_TESTS=ON -DREALM_BUILD_BENCHMARKS=ON -DCMAKE_HIP_PLATFORM=nvidia"
      if [[ "${REALM_NETWORKS}" != "ucx" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_UCX=OFF";
      else REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_UCX=ON"; fi
      if [[ -z "${GASNET_ROOT}${EMBED_GASNET}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_GASNETEX=OFF";
      else REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_GASNETEX=ON"; fi
      if [[ -z "${Kokkos_DIR}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_KOKKOS=OFF"; else REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_KOKKOS=ON"; fi
      if [[ "${USE_SPY}" -eq 1 ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_LOG_LEVEL=INFO"; fi
      if [[ "${TEST_REGENT:-1}" -eq 1 ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_LOG_LEVEL=INFO"; fi
      if [[ "${DEBUG}" -eq 1 ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Debug"; fi
      if [[ "${USE_CCACHE}" -eq 1 ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DCMAKE_CXX_COMPILER_LAUNCHER=ccache"; fi
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_CPPTRACE=${REALM_BACKTRACE_USE_CPPTRACE:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_PREALM=${USE_PROF:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_CUDA=${USE_CUDA:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_NVTX=${USE_NVTX:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_HIP=${USE_HIP:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_MPI=${USE_MPI:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_HDF5=${USE_HDF:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_OPENMP=${USE_OPENMP:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_PYTHON=${USE_PYTHON:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_MAX_DIM=${MAX_DIM:-3}"
      echo cmake -S realm -B realm/build -DCMAKE_INSTALL_PREFIX=realm/install -DBUILD_SHARED_LIBS=ON $REALM_CMAKE_ARGS
      bash -c "cmake -S realm -B realm/build -DCMAKE_INSTALL_PREFIX=realm/install -DBUILD_SHARED_LIBS=ON $REALM_CMAKE_ARGS"
      cmake --build realm/build --parallel $THREADS
      cmake --install realm/build
      # Temporary hack for some regent builds that need to be updated to use the correct include paths
      cp realm/install/include/realm_defines.h runtime/realm
      export Realm_ROOT="$(pwd)/realm/install"
      export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${Realm_ROOT}/lib
    - $TEST_PYTHON_EXE ./test.py $TEST_PY_ARGS --tmp-dir ${CI_PROJECT_DIR}/tmp
  retry:
    max: 0
    when:
      - runner_system_failure
      - unknown_failure

# testing MSVC builds is kinda hacky right now - not supported by test.py
.msvc_tests: &msvc_tests
  <<: *test_rules
  script:
    - ln -s $CPM_SOURCE_CACHE /home/wine/.wine/drive_c/cpm_src
    - ln -s `pwd` /home/wine/.wine/drive_c/repo
    - cd /home/wine/.wine/drive_c
    - |
      REALM_CMAKE_ARGS="-DGASNet_ROOT="${GASNET_ROOT}" -DKokkos_ROOT="${Kokkos_DIR}" -DCPPTRACE_GET_SYMBOLS_WITH_NOTHING=ON -DREALM_BUILD_TESTS=ON -DREALM_BUILD_BENCHMARKS=ON -DCMAKE_HIP_PLATFORM=nvidia"
      if [[ -z "${UCX_ROOT}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_UCX=OFF"; fi
      if [[ -z "${GASNET_ROOT}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_GASNETEX=OFF"; fi
      if [[ -z "${Kokkos_DIR}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_KOKKOS=OFF"; fi
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_CPPTRACE=${REALM_BACKTRACE_USE_CPPTRACE:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_PREALM=${USE_PROF:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_CUDA=${USE_CUDA:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_NVTX=${USE_NVTX:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_HIP=${USE_HIP:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_MPI=${USE_MPI:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_HDF5=${USE_HDF:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_OPENMP=${USE_OPENMP:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_PYTHON=${USE_PYTHON:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_MAX_DIM=${MAX_DIM:-3}"
      export REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS}"
      unset CPM_SOURCE_CACHE
    - su wine -c "wine64 cmd /c 'x64.bat && cmake -G Ninja -S repo/realm -B build -DCMAKE_INSTALL_PREFIX=install $REALM_CMAKE_ARGS'"
    # wine doesn't seem to cope with concurrent file access, so use a serial build
    - su wine -c "wine64 cmd /c 'x64.bat && cmake --build build -j1'"
    - su wine -c "wine64 cmd /c 'x64.bat && set PATH=C:\\Tools\\VS2022\\VC\\Redist\\MSVC\\14.38.33130\\debug_nonredist\\x64\\Microsoft.VC143.DebugCRT;C:\\Tools\\SDK\\10\\bin\\10.0.20348.0\\x64\\ucrt;%PATH% && ctest --test-dir build --output-on-failure'"
    - echo OK

# use a custom script for running Realm tests with sanitizers
.realm_sanitizer_tests: &realm_sanitizer_tests
  <<: *test_rules
  script:
    - |
      if [[ ! -z "${REALM_URL}" ]]; then
        # Replace realm with the one given
        rm -rf realm
        if ! echo "$REALM_SHA256  $DEP_CACHE/realm-$REALM_COMMIT.tar.gz" | shasum -a 256 -c; then
          curl -sL "${REALM_URL}" -o ${DEP_CACHE}/realm-${REALM_COMMIT}.tar.gz
          echo "$REALM_SHA256  $DEP_CACHE/realm-$REALM_COMMIT.tar.gz" | shasum -a 256 -c
        fi
        tar -zxf ${DEP_CACHE}/realm-${REALM_COMMIT}.tar.gz
        mv realm-* realm
      fi
      mkdir -p build
      REALM_CMAKE_ARGS="-DGASNet_ROOT="${GASNET_ROOT}" -DKokkos_ROOT="${Kokkos_DIR}" -DCPPTRACE_GET_SYMBOLS_WITH_NOTHING=ON -DREALM_BUILD_TESTS=ON -DREALM_BUILD_BENCHMARKS=ON -DCMAKE_HIP_PLATFORM=nvidia"
      if [[ "${REALM_NETWORKS}" != "ucx" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_UCX=OFF";
      else REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_UCX=ON"; fi
      if [[ -z "${GASNET_ROOT}${EMBED_GASNET}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_GASNETEX=OFF";
      else REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_GASNETEX=ON"; fi
      if [[ -z "${Kokkos_DIR}" ]]; then REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_KOKKOS=OFF"; fi
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_CPPTRACE=${REALM_BACKTRACE_USE_CPPTRACE:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_PREALM=${USE_PROF:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_CUDA=${USE_CUDA:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_NVTX=${USE_NVTX:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_HIP=${USE_HIP:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_MPI=${USE_MPI:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_HDF5=${USE_HDF:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_OPENMP=${USE_OPENMP:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_ENABLE_PYTHON=${USE_PYTHON:-0}"
      REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DREALM_MAX_DIM=${MAX_DIM:-3}"
      export REALM_CMAKE_ARGS="${REALM_CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Debug -DREALM_SANITIZER=${SANITIZER_TYPE}"
    - bash -c "cmake -S realm -B build -DCMAKE_INSTALL_PREFIX=install $REALM_CMAKE_ARGS"
    - cmake --build build -j$THREADS
    - ctest --output-on-failure --test-dir build
    - echo OK

.realm_clang_format: &realm_clang_format
  script:
    - git diff -U0 --no-color ${CI_MERGE_REQUEST_DIFF_BASE_SHA} -- '**realm/*.cc' '**realm/*.h' | clang-format-diff-14 -p1 2>&1 > /tmp/not-formatted.diff
    - |
      if grep -q '[^[:space:]]' /tmp/not-formatted.diff; then
        echo 'Code is not formatted'
        echo 'Run clang-format-diff on your changes to fix these:'
        echo "    git diff -U0 --no-color origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} -- '**realm/*.cc' '**realm/*.h' | clang-format-diff-14 -p1 -i"
        echo "Diff formatting result:"
        cat /tmp/not-formatted.diff
        exit 1
      fi

# For performance tests, run these commands:
.perf_tests: &perf_tests
  script:
    - ./tools/add_github_host_key.sh
    - |
      if [[ -n $GITLAB_DEPLOY_KEY ]]; then
        eval $(ssh-agent -s)
        ssh-add <(echo "$GITLAB_DEPLOY_KEY")
      fi
    - git config --global user.name "Legion Testing Automation"
    - git config --global user.email "legion-testing@googlegroups.com"
    - export PERF_MIN_NODES=1
    - export PERF_MAX_NODES=1
    - $TEST_PYTHON_EXE ./test.py --test=perf --tmp-dir ${CI_PROJECT_DIR}/tmp
  retry:
    max: 0
    when:
      - runner_system_failure
      - unknown_failure

###
### Jobs
###

# Each item below defines a job.

# There are two tiers of tests.
#  1. Full test suite (small number of compilers).
#  2. Minimal test suite (other compilers).

# Run the full test suite on GCC 9 and Clang 12.

# Linux with GCC 9
# * Basic configurations
#   * Release
gcc9_cxx17_release_legion_fortran:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *legion, *fortran]
gcc9_cxx17_release_llvm_cmake_regent_pretty:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *llvm, *llvm12, *cmake, *regent_pretty, *incremental, *short, *shared]
#   * Debug (Privilege and Bounds Checks)
gcc9_cxx17_debug_checks_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *checks, *legion]
#   * Spy
gcc9_cxx17_debug_spy_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *spy, *legion]
gcc9_cxx17_debug_spy_python3_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *spy, *python3, *regent, *parallel]
#   * Prof
gcc9_cxx17_release_prof_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *prof, *regent, *parallel]
#   * higher dimension support (5-D)
gcc9_cxx17_release_maxdim5_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *maxdim5, *regent, *parallel]
gcc9_cxx17_release_maxdim5_regent_pretty:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *maxdim5, *regent_pretty, *parallel]
# * Features: one test per feature
#   * OpenMP
gcc9_cxx17_debug_openmp_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *openmp, *legion]
gcc9_cxx17_debug_openmp_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *openmp, *regent]
gcc9_cxx17_debug_openmp_system_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *openmp, *openmp_system, *regent, *short]
#   * Python
gcc9_cxx17_debug_python3_cmake_prof_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *python3, *cmake, *legion, *ctest, *realm_unit_ctest, *prof, *shared, *short]
#   * LLVM
gcc9_cxx17_debug_llvm_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *cmake, *legion, *ctest, *realm_unit_ctest, *shared, *cpptrace]
gcc9_cxx17_debug_llvm_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *regent]
#   * HDF5
gcc9_cxx17_debug_hdf5_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *hdf5, *cmake, *legion, *ctest, *cpptrace]
gcc9_cxx17_debug_hdf5_regent_pretty:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *hdf5, *regent_pretty]
#   * GASNet-1 (legacy API)
gcc9_cxx17_release_gasnet1_mpi_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnet1_mpi, *legion]
gcc9_cxx17_debug_gasnet1_mpi_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *gasnet1_mpi, *cmake, *legion, *ctest, *shared, *cpptrace]
gcc9_cxx17_debug_gasnet1_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *gasnet1_mpi, *regent, *incremental]
#   * Embedded GASNet builds (local and remote, static and shared)
gcc9_cxx17_release_gasnet1_mpi_embedlocal_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnet1_mpi, *gasnet_embed_local, *cmake, *ctest, *legion, *shared, *cpptrace]
gcc9_cxx17_release_gasnet1_mpi_embedremote_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnet1_mpi, *gasnet_embed_remote, *cmake, *ctest, *legion, *shared, *cpptrace]
gcc9_cxx17_release_shared_gasnet1_mpi_embedlocal_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *shared, *cxx17_normal, *gasnet1_mpi, *gasnet_embed_local, *cmake, *ctest, *legion, *shared, *cpptrace]
gcc9_cxx17_release_shared_gasnet1_mpi_embedremote_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *shared, *cxx17_normal, *gasnet1_mpi, *gasnet_embed_remote, *cmake, *ctest, *legion, *shared, *cpptrace]
#   * GASNet-EX (native API, 2020.11.0+)
gcc9_cxx17_release_gasnetex_mpi_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnetex_mpi, *legion]
gcc9_cxx17_debug_gasnetex_mpi_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *gasnetex_mpi, *gasnetex_wrapper, *cmake, *legion, *ctest, *short, *shared, *cpptrace]
gcc9_cxx17_debug_gasnetex_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *gasnetex_mpi, *regent, *incremental, *short]
gcc9_cxx17_debug_gasnetex_mpi_debug_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *gasnetex_mpi_debug, *regent, *incremental]
gcc9_cxx17_debug_gasnetex_mpi_stable_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *gasnetex_mpi_stable, *regent, *incremental]
#   * GASNet (UCX conduit)
gcc9_cxx17_release_gasnet1_ucx_legion:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnet1_ucx, *legion]
gcc9_cxx17_release_gasnet1_ucx_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnet1_ucx, *cmake, *legion, *ctest, *shared, *short, *cpptrace]
gcc9_cxx17_release_gasnet1_ucx_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnet1_ucx, *regent, *incremental]
gcc9_cxx17_release_gasnetex_ucx_legion:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnetex_ucx, *legion]
gcc9_cxx17_debug_gasnetex_ucx_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *gasnetex_ucx, *gasnetex_wrapper, *cmake, *legion, *ctest, *shared, *cpptrace]
gcc9_cxx17_release_gasnetex_ucx_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *gasnetex_ucx, *regent, *incremental,  *short]
#   * MPI and multi-node legion prof
gcc9_cxx17_release_mpi_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *mpi, *legion]
gcc9_cxx17_debug_mpi_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *mpi, *cmake, *legion, *ctest, *shared, *cpptrace]
gcc9_cxx17_release_mpi_prof_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_normal, *mpi, *regent, *incremental, *prof, *short]
#   * UCX
gcc9_cxx17_release_ucx_legion:
 <<: [*linux, *image_2004, *tests]
 variables:
   <<: [*gcc9, *terra12, *release, *cxx17_normal, *ucx, *legion]
gcc9_cxx17_debug_ucx_dynamic_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *ucx, *ucx_dynamic, *cmake, *legion, *ctest, *short, *cpptrace]
gcc9_cxx17_debug_ucx_regent:
 <<: [*linux_compute, *image_2004, *tests]
 variables:
   <<: [*gcc9, *terra12, *debug, *cxx17_normal, *ucx, *regent, *incremental]
# * Integration: Python + Regent
gcc9_cxx17_debug_python3_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *python3, *regent]
# * Integration: LLVM + GASNet
gcc9_cxx17_debug_llvm_gasnetex_mpi_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *gasnetex_mpi, *legion]
gcc9_cxx17_debug_llvm_gasnetex_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *gasnetex_mpi, *regent, *incremental]
# * Integration: LLVM + MPI
gcc9_cxx17_debug_llvm_mpi_legion:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *mpi, *legion]
gcc9_cxx17_debug_llvm_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *mpi, *regent, *incremental]
# * Integration: LLVM + UCX
#gcc9_cxx17_debug_llvm_ucx_legion:
#  <<: [*linux_compute, *image_2004, *tests]
#  variables:
#    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *ucx, *legion]
#gcc9_cxx17_debug_llvm_ucx_regent:
#  <<: [*linux_compute, *image_2004, *tests]
#  variables:
#    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *ucx, *regent, *incremental]
# * Integration: HDF5 + GASNet
gcc9_cxx17_debug_hdf5_gasnetex_mpi_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *hdf5, *gasnetex_mpi, *legion]
gcc9_cxx17_debug_hdf5_gasnetex_mpi_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *hdf5, *gasnetex_mpi, *regent]
# * Integration: HDF5 + MPI
gcc9_cxx17_debug_hdf5_mpi_legion:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *hdf5, *mpi, *legion]
gcc9_cxx17_debug_hdf5_mpi_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *hdf5, *mpi, *regent]
# * Integration: HDF5 + UCX
#gcc9_cxx17_debug_hdf5_ucx_legion:
#  <<: [*linux_compute, *image_2004, *tests]
#  variables:
#    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *hdf5, *ucx, *legion]
#gcc9_cxx17_debug_hdf5_ucx_regent:
#  <<: [*linux, *image_2004, *tests]
#  variables:
#    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *hdf5, *ucx, *regent]
# Multi-node Legion Spy
gcc9_cxx17_debug_spy_gasnet1_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *cxx17_normal, *spy, *gasnet1_mpi, *regent, *short]
gcc9_cxx17_debug_spy_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *cxx17_normal, *spy, *mpi, *regent]
#gcc9_cxx17_debug_spy_ucx_regent:
#  <<: [*linux_compute, *image_2004, *tests]
#  variables:
#    <<: [*gcc9, *terra12, *cxx17_normal, *spy, *ucx, *regent]
# * Different architectures
gcc9_cxx17_32bit_debug_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_32bit_normal, *legion]
gcc9_cxx17_32bit_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_32bit_normal, *legion]
# * External tests
gcc9_cxx17_debug_external1:
  <<: [*linux_compute, *image_2004, *external_tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *openmp, *hdf5, *external1, *short]
gcc9_cxx17_debug_maxdim4_external2:
  <<: [*linux_compute, *image_2004, *external_tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_external, *maxdim4, *openmp, *hdf5, *external2, *short]
gcc9_cxx17_debug_private:
  <<: [*linux_compute, *image_2004, *external_tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *openmp, *hdf5, *private, *short]
# * Test multi-node remote mapping without control replication in Regent
gcc9_cxx17_debug_gasnetex_mpi_regent_nocr:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *debug, *cxx17_normal, *gasnetex_mpi, *regent, *incremental, *nocr]

# Linux with Clang 12
# * Basic configurations
#   * Release
clang12_cxx17_release_legion_fortran:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *release, *cxx17_normal, *legion, *fortran]
clang12_cxx17_release_llvm_cmake_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *release, *cxx17_normal, *llvm, *llvm12, *cmake, *regent, *incremental]
#   * Debug (Privilege and Bounds Checks)
clang12_cxx17_debug_checks_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *checks, *legion]
#   * Spy
clang12_cxx17_debug_spy_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *spy, *legion]
clang12_cxx17_debug_spy_python3_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *spy, *python3, *regent, *parallel, *short]
#   * Prof
clang12_cxx17_release_prof_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *release, *cxx17_normal, *prof, *regent, *parallel, *short]
# * Features: one test per feature
#   * OpenMP
clang12_cxx17_debug_openmp_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *openmp, *legion]
clang12_cxx17_debug_openmp_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *openmp, *regent]
#   * Python
clang12_cxx17_debug_python3_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *python3, *jupyter, *legion]
#   * LLVM
clang12_cxx17_debug_llvm_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *cmake, *legion, *ctest, *realm_unit_ctest, *cpptrace]
clang12_cxx17_debug_llvm_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *regent]
#   * HDF5
clang12_cxx17_debug_hdf5_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *hdf5, *cmake, *legion, *ctest, *cpptrace]
clang12_cxx17_debug_hdf5_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *hdf5, *regent]
#   * GASNet
clang12_cxx17_debug_gasnetex_mpi_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *gasnetex_mpi, *gasnetex_wrapper, *cmake, *shared, *legion, *ctest, *cpptrace]
clang12_cxx17_debug_gasnetex_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *gasnetex_mpi, *regent, *incremental]
#   * MPI
clang12_cxx17_debug_mpi_cmake_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *mpi, *cmake, *legion, *ctest, *cpptrace]
clang12_cxx17_debug_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *mpi, *regent, *incremental]
#   * UCX
clang12_cxx17_debug_ucx_cmake_legion:
 <<: [*linux, *image_2004, *tests]
 variables:
   <<: [*clang12, *terra12, *debug, *cxx17_normal, *ucx, *cmake, *legion, *ctest, *cpptrace]
clang12_cxx17_debug_ucx_regent:
 <<: [*linux_compute, *image_2004, *tests]
 variables:
   <<: [*clang12, *terra12, *debug, *cxx17_normal, *ucx, *regent, *incremental]
# * Integration: Python + Regent
clang12_cxx17_debug_python3_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *python3, *regent]
# * Integration: LLVM + GASNet
clang12_cxx17_debug_llvm_gasnetex_mpi_legion:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *gasnetex_mpi, *legion]
clang12_cxx17_debug_llvm_gasnetex_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *gasnetex_mpi, *regent, *incremental]
# * Integration: LLVM + MPI
clang12_cxx17_debug_llvm_mpi_legion:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *mpi, *legion]
clang12_cxx17_debug_llvm_mpi_regent:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *mpi, *regent, *incremental]
# * Integration: LLVM + UCX
#clang12_cxx17_debug_llvm_ucx_legion:
#  <<: [*linux_compute, *image_2004, *tests]
#  variables:
#    <<: [*clang12, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *ucx, *legion]
#clang12_cxx17_debug_llvm_ucx_regent:
#  <<: [*linux_compute, *image_2004, *tests]
#  variables:
#    <<: [*clang12, *terra12, *debug, *cxx17_normal, *llvm, *llvm12, *ucx, *regent, *incremental]
# * Integration: HDF5 + GASNet
clang12_cxx17_debug_hdf5_gasnetex_mpi_legion:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *hdf5, *gasnetex_mpi, *legion]
clang12_cxx17_debug_hdf5_gasnetex_mpi_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *hdf5, *gasnetex_mpi, *regent, *incremental]
# * Integration: HDF5 + MPI
clang12_cxx17_debug_hdf5_mpi_legion:
  <<: [*linux_compute, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *hdf5, *mpi, *legion]
clang12_cxx17_debug_hdf5_mpi_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *hdf5, *mpi, *regent, *incremental]
# * Integration: HDF5 + UCX
#clang12_cxx17_debug_hdf5_ucx_legion:
#  <<: [*linux_compute, *image_2004, *tests]
#  variables:
#    <<: [*clang12, *terra12, *debug, *cxx17_normal, *hdf5, *ucx, *legion]
#clang12_cxx17_debug_hdf5_ucx_regent:
#  <<: [*linux, *image_2004, *tests]
#  variables:
#    <<: [*clang12, *terra12, *debug, *cxx17_normal, *hdf5, *ucx, *regent, *incremental]
# * Integration: HDF5 + GASNet
# clang12_cxx17_debug_spy_gasnet_regent:
#   <<: [*linux_compute, *image_2004, *tests]
#   variables:
#     <<: [*clang12, *terra12, *debug, *cxx17_normal, *spy, *gasnet, *regent]
# * Different architectures
clang12_cxx17_32bit_debug_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_32bit_normal, *legion]
clang12_cxx17_32bit_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *release, *cxx17_32bit_normal, *legion, *short]
# * External tests
clang12_cxx17_debug_external1:
  <<: [*linux_compute, *image_2004, *external_tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *openmp, *hdf5, *external1]
clang12_cxx12_debug_maxdim4_external2:
  <<: [*linux_compute, *image_2004, *external_tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_external, *maxdim4, *openmp, *hdf5, *external2]
clang12_cxx17_debug_private:
  <<: [*linux_compute, *image_2004, *external_tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *openmp, *hdf5, *private]

# macOS with Clang
macos_clang_cxx17_debug_legion:
  <<: [*macos, *tests]
  variables:
    <<: [*macos_clang, *debug, *cxx17_normal, *legion, *short, *no_ccache]
macos_clang_cxx17_release_legion:
  <<: [*macos, *tests]
  variables:
    <<: [*macos_clang, *release, *cxx17_normal, *legion, *short, *no_ccache]
macos_clang_cxx20_release_cmake_legion:
  <<: [*macos, *tests]
  variables:
    <<: [*macos_clang, *release, *cxx20_normal, *cmake, *legion, *ctest, *realm_unit_ctest, *short, *no_ccache]
# macos_clang_cxx17_debug_cmake_regent:
#   <<: [*macos, *tests]
#   variables:
#     <<: [*macos_clang, *debug, *cxx17_normal, *cmake, *regent, *short, *no_ccache]

# Run minimal tests on other compilers.

# GCC 9 with extra hardening
gcc9_cxx17_hardened_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_hardened, *legion]
gcc9_cxx17_hardened_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc9, *terra12, *release, *cxx17_hardened, *regent, *parallel]

# GCC 10 with C++ 17
gcc10_cxx17_debug_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra12, *debug, *cxx17_normal, *legion]
gcc10_cxx17_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra12, *release, *cxx17_normal, *legion]
gcc10_cxx17_debug_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra12, *debug, *cxx17_normal, *regent]
gcc10_cxx17_release_regent_pretty:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc10, *terra12, *release, *cxx17_normal, *regent_pretty]

# GCC 11 with C++ 20
gcc11_cxx20_debug_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc11, *terra12, *debug, *cxx20_normal, *legion]
gcc11_cxx20_release_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc11, *terra12, *release, *cxx20_normal, *legion]
gcc11_cxx20_debug_regent:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc11, *terra12, *debug, *cxx20_normal, *regent]
gcc11_cxx20_release_regent_pretty:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*gcc11, *terra12, *release, *cxx20_normal, *regent_pretty]

# GCC 12 with C++ 20
gcc12_cxx20_debug_legion:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*gcc12, *terra14, *debug, *cxx20_normal, *legion]
gcc12_cxx20_release_legion:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*gcc12, *terra14, *release, *cxx20_normal, *legion]
gcc12_cxx20_debug_regent:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*gcc12, *terra14, *debug, *cxx20_normal, *regent]
gcc12_cxx20_release_regent_pretty:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*gcc12, *terra14, *release, *cxx20_normal, *regent_pretty]

# Clang 14 with C++ 20
clang14_cxx20_debug_legion:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*clang14, *terra14, *debug, *cxx20_normal, *legion]
clang14_cxx20_release_legion:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*clang14, *terra14, *release, *cxx20_normal, *legion]
clang14_cxx20_debug_regent:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*clang14, *terra14, *debug, *cxx20_normal, *regent]
clang14_cxx20_release_regent:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*clang14, *terra14, *release, *cxx20_normal, *regent]

# HIP CUDA tests:
nvidia_hip_cuda125_gcc10_cxx17_debug_cuda_legion_realm:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *debug, *cxx17_normal, *hip_cuda125, *legion, *realm, *short, *shared]

# CUDA tests:
nvidia_cuda117_gcc10_cxx17_debug_cmake_cuda_dynamic_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc10, *debug, *cxx17_normal, *cuda117, *cmake, *legion, *cuda_dynamic, *ctest, *realm_unit_ctest, *short, *shared, *cpptrace]
nvidia_cuda117_gcc10_cxx17_release_cmake_cuda_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc10, *release, *cxx17_normal, *cuda117, *legion, *cmake, *ctest, *realm_unit_ctest, *shared]
nvidia_cuda121_gcc11_cxx17_debug_cmake_cuda_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *debug, *cxx17_normal, *cuda121, *legion, *short, *cmake, *ctest, *realm_unit_ctest, *shared, *cpptrace]
nvidia_cuda121_gcc11_cxx17_release_cmake_cuda_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *release, *cxx17_normal, *cuda121, *cmake, *legion, *ctest, *realm_unit_ctest, *shared]
nvidia_cuda125_gcc11_cxx17_release_cmake_cuda_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *release, *cxx17_normal, *cuda125, *legion, *cmake, *ctest, *realm_unit_ctest, *shared]
nvidia_cuda125_gcc11_cxx20_debug_checks_cmake_cuda_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *debug, *cxx20_normal, *checks, *cuda125, *legion, *short, *cmake, *ctest, *realm_unit_ctest, *shared, *cpptrace]
nvidia_cuda125_gcc11_cxx20_release_cmake_cuda_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *release, *cxx20_normal, *cuda125, *cmake, *legion, *ctest, *realm_unit_ctest, *shared]
nvidia_cuda125_clang12_cxx17_release_cmake_cuda_regent:
  <<: [*nvidia, *tests]
  variables:
    <<: [*clang12, *llvm12, *release, *cxx17_normal, *cuda125, *regent, *cmake, *ctest, *realm_unit_ctest, *short]
nvidia_cuda125_clang12_cxx20_release_cmake_cuda_regent:
  <<: [*nvidia, *tests]
  variables:
    <<: [*clang12, *llvm12, *release, *cxx20_normal, *cuda125, *cmake, *ctest, *realm_unit_ctest, *regent, *shared]
nvidia_cuda125_gcc11_cxx17_debug_maxdim4_external2:
  <<: [*nvidia, *external_tests]
  variables:
    <<: [*gcc11, *llvm12, *debug, *cxx17_external, *cuda125, *maxdim4, *openmp, *hdf5, *external2, *short]

# CUDA+GASNet tests:
nvidia_cuda121_gcc11_cxx17_debug_gasnetex_mpi_cmake_cuda_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *debug, *cxx17_normal, *cuda121, *cmake, *gasnetex_mpi, *gasnetex_wrapper, *shared, *legion, *ctest, *short, *cpptrace]
nvidia_cuda125_gcc11_cxx17_release_gasnetex_mpi_cuda_regent:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *llvm12, *release, *cxx17_normal, *cuda125, *gasnetex_mpi, *regent]

# CUDA+UCX tests:
nvidia_cuda121_gcc11_cxx17_debug_ucx_cmake_cuda_legion:
 <<: [*nvidia, *tests]
 variables:
   <<: [*gcc11, *debug, *cxx17_normal, *cuda121, *cmake, *ucx, *legion, *ctest, *short, *cpptrace]
nvidia_cuda125_gcc11_cxx17_release_ucx_cuda_regent:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *llvm12, *release, *cxx17_normal, *cuda125, *ucx, *regent]

# Kokkos tests:
clang12_cxx17_debug_kokkos_legion:
  <<: [*linux, *image_2004, *tests]
  variables:
    <<: [*clang12, *terra12, *debug, *cxx17_normal, *kokkos, *cmake, *legion, *ctest, *cpptrace]
clang14_cxx17_debug_kokkos_openmp_legion:
  <<: [*linux, *image_2204, *tests]
  variables:
    <<: [*clang14, *terra14, *debug, *cxx17_normal, *kokkos, *openmp, *cmake, *legion, *ctest]
nvidia_cuda125_clang12_cxx17_debug_kokkos_cuda_openmp_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*clang12, *debug, *cxx17_normal, *cuda125, *kokkos, *openmp, *cmake, *legion, *ctest, *short, *cpptrace]
nvidia_cuda121_gcc11_cxx17_debug_kokkos_cuda_openmp_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *debug, *cxx17_normal, *cuda121, *kokkos, *openmp, *cmake, *legion, *ctest, *cpptrace]
nvidia_cuda125_gcc11_cxx17_debug_shared_kokkos_cuda_openmp_legion:
  <<: [*nvidia, *tests]
  variables:
    <<: [*gcc11, *debug, *shared, *cxx17_normal, *cuda125, *kokkos, *openmp, *cmake, *legion, *ctest, *short, *cpptrace]

# HPCSDK (nvc++) tests:
hpcsdk251_cxx17_release_cmake_legion:
  <<: [*linux_avx, *image_hpcsdk, *tests]
  variables:
    <<: [*hpcsdk251, *release, *cxx17_normal, *cmake, *legion, *ctest, *cpptrace]
hpcsdk251_cxx17_debug_cmake_legion:
  <<: [*linux_avx, *image_hpcsdk, *tests]
  variables:
    <<: [*hpcsdk251, *debug, *cxx17_normal, *cmake, *legion, *ctest, *short, *cpptrace]

# Intel compiler (icx/icpx) tests:
icc212_cxx17_release_legion:
  <<: [*linux, *image_icc, *tests]
  variables:
    <<: [*icc212, *release, *cxx17_precise, *legion]
icc212_cxx17_debug_cmake_legion:
  <<: [*linux, *image_icc, *tests]
  variables:
    <<: [*icc212, *debug, *cxx17_precise, *cmake, *legion, *ctest, *realm_unit_ctest, *short, *cpptrace]

# MSVC (Realm only):
#msvc178_realm:
#  <<: [*linux_avx, *image_msvc178, *msvc_tests]
#  variables:
#    <<: [*short]

# sanitizer tests (Realm only):
gcc12_tsan_realm:
  <<: [*linux, *image_2204, *realm_sanitizer_tests]
  variables:
    <<: [*gcc12, *cxx17_normal, *tsan, *short, *cpptrace]
gcc12_ubsan_realm:
  <<: [*linux, *image_2204, *realm_sanitizer_tests]
  variables:
    <<: [*gcc12, *cxx17_normal, *ubsan, *short, *cpptrace]
gcc12_asan_realm:
  <<: [*linux, *image_2204, *realm_sanitizer_tests]
  variables:
    <<: [*gcc12, *cxx17_normal, *asan, *short, *cpptrace]
clang_format_realm:
  rules:
    # Always during a merge request update
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    # Never any other time
    - when: never
  <<: [*linux, *image_2204, *realm_clang_format]
  variables:
    <<: [*gcc12, *cxx17_normal, *short]
